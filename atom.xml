<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Master-cai</title>
  
  <subtitle>[object Object]</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://blog.master-cai.xyz/"/>
  <updated>2022-09-11T13:52:34.845Z</updated>
  <id>http://blog.master-cai.xyz/</id>
  
  <author>
    <name>Master-cai</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>使用blender进行点云可视化</title>
    <link href="http://blog.master-cai.xyz/posts/39416.html"/>
    <id>http://blog.master-cai.xyz/posts/39416.html</id>
    <published>2022-08-30T01:08:40.000Z</published>
    <updated>2022-09-11T13:52:34.845Z</updated>
    
    <content type="html"><![CDATA[<h1 id="使用blender进行点云可视化"><a href="#使用blender进行点云可视化" class="headerlink" title="使用blender进行点云可视化"></a>使用blender进行点云可视化</h1><p>最近做了一些点云可视化的工作，感觉应该可以经常复用，特此记录一下相关的一些内容。由于使用blender进行可视化需要借助额外的插件，其仅支持ply格式文件，因此本文将从ply格式文件的生成和处理以及配色选择搭配开始介绍，最后再介绍如何使用blender进行点云可视化。</p><h2 id="ply文件生成"><a href="#ply文件生成" class="headerlink" title="ply文件生成"></a>ply文件生成</h2><h3 id="ply格式"><a href="#ply格式" class="headerlink" title="ply格式"></a>ply格式</h3><p><a href="http://paulbourke.net/dataformats/ply/" target="_blank" rel="noopener">PLY文件格式</a>是Stanford大学开发的一套三维模型数据格式。可以存放顶点，面片，或其他的一种或者多种。举例读取一种简单的，只包含了顶点数据。数据格式如下所示:</p><pre class="line-numbers language-python"><code class="language-python">plyformat binary_little_endian <span class="token number">1.0</span> <span class="token comment" spellcheck="true"># 编码格式</span>comment Created by Open3D <span class="token comment" spellcheck="true"># 使用的创建工具</span>element vertex <span class="token number">1000</span> <span class="token comment" spellcheck="true"># 顶点元素数量</span>property double x <span class="token comment" spellcheck="true"># 下列皆为顶点属性</span>property double yproperty double zproperty uchar redproperty uchar greenproperty uchar blueend_header <span class="token comment" spellcheck="true"># 数据头结束符 后接二进制数据</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="数据格式转换"><a href="#数据格式转换" class="headerlink" title="数据格式转换"></a>数据格式转换</h3><p>理论上，按照这个格式可以自己通过编辑文本的方式生成ply文件，但是为了使用和维护的方便，我们选择使用<code>Open3D</code>库进行处理.</p><p>从数据格式看出，对于点云数据，我们只需要获得其<code>x,y,z</code>坐标以及<code>rgb</code>颜色值即可。由于我们本次拿到的初始文件格式为<code>x,y,z,label</code>的形式，只需要将label转化为相应的<code>rgb</code>值即可。</p><p>这里，由于label数量较多，人工选择色彩容易出现易混淆的情况，这个问题在stackoverflow上已经有很多<a href="https://stackoverflow.com/questions/470690/how-to-automatically-generate-n-distinct-colors" target="_blank" rel="noopener">讨论</a>了，这里我们直接从GitHub上找到了一个自动生成n种区分度较大的颜色的<a href="https://github.com/choumin/ncolors" target="_blank" rel="noopener">项目</a>，为n种标签生成区分度较大的配色方案，代码如下:</p><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># get_n_colors.py</span><span class="token keyword">import</span> colorsys<span class="token keyword">import</span> random<span class="token keyword">import</span> matplotlib<span class="token punctuation">.</span>pyplot <span class="token keyword">as</span> plt<span class="token comment" spellcheck="true"># hls格式色彩生成算法</span><span class="token keyword">def</span> <span class="token function">get_n_hls_colors</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">:</span>    hls_colors <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    i <span class="token operator">=</span> <span class="token number">0</span>    step <span class="token operator">=</span> <span class="token number">360.0</span> <span class="token operator">/</span> num    <span class="token keyword">while</span> i <span class="token operator">&lt;</span> <span class="token number">360</span><span class="token punctuation">:</span>        h <span class="token operator">=</span> i        s <span class="token operator">=</span> <span class="token number">90</span> <span class="token operator">+</span> random<span class="token punctuation">.</span>random<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">10</span>        l <span class="token operator">=</span> <span class="token number">50</span> <span class="token operator">+</span> random<span class="token punctuation">.</span>random<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">10</span>        _hlsc <span class="token operator">=</span> <span class="token punctuation">[</span>h <span class="token operator">/</span> <span class="token number">360.0</span><span class="token punctuation">,</span> l <span class="token operator">/</span> <span class="token number">100.0</span><span class="token punctuation">,</span> s <span class="token operator">/</span> <span class="token number">100.0</span><span class="token punctuation">]</span>        hls_colors<span class="token punctuation">.</span>append<span class="token punctuation">(</span>_hlsc<span class="token punctuation">)</span>        i <span class="token operator">+=</span> step    <span class="token keyword">return</span> hls_colors <span class="token comment" spellcheck="true"># generate colors for ply file</span><span class="token keyword">def</span> <span class="token function">ncolors</span><span class="token punctuation">(</span>num<span class="token punctuation">,</span> rgb<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""    num: points number    rgb: hls color by Default    return: hls or rgb color in [0,1]    """</span>    <span class="token keyword">if</span> num <span class="token operator">&lt;</span> <span class="token number">1</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> rgb_colors    hls_colors <span class="token operator">=</span> get_n_hls_colors<span class="token punctuation">(</span>num<span class="token punctuation">)</span>    <span class="token keyword">if</span> rgb<span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token punctuation">[</span>colorsys<span class="token punctuation">.</span>hls_to_rgb<span class="token punctuation">(</span>h<span class="token punctuation">,</span> l<span class="token punctuation">,</span> s<span class="token punctuation">)</span> <span class="token keyword">for</span> h<span class="token punctuation">,</span> l<span class="token punctuation">,</span> s <span class="token keyword">in</span> hls_colors<span class="token punctuation">]</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> hls_colors<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    n <span class="token operator">=</span> <span class="token number">13</span>    rgb_colors <span class="token operator">=</span> ncolors<span class="token punctuation">(</span>n<span class="token punctuation">,</span> rgb<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>    col_map <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>len<span class="token punctuation">(</span>rgb_colors<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>           col_map<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span>x <span class="token keyword">for</span> x <span class="token keyword">in</span> rgb_colors<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>col_map<span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 输出得到的color map</span>    x <span class="token operator">=</span> <span class="token punctuation">[</span>x <span class="token keyword">for</span> x <span class="token keyword">in</span> range<span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">]</span>    y <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">*</span>n    <span class="token comment" spellcheck="true"># 使用plt简单查看颜色显示效果</span>    plt<span class="token punctuation">.</span>bar<span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> color<span class="token operator">=</span>rgb_colors<span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 这里只能正确显示rgb颜色！</span>    plt<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>其结果如下：</p><img src="https://raw.githubusercontent.com/mastercaiOSS/OSS/master/blog/2022/08-30-image-20220830094604432.png"><p><img src="https://raw.githubusercontent.com/mastercaiOSS/OSS/master/blog/2022/08-30-image-20220830094738975.png" alt></p><p>需要注意的是，这里返回的颜色值都在[0,1]区间内，当时没注意到这一点，增加了很多调试的时间。但是这也是符合后续ply文件需求的(颜色值需要在[0,1]区间内)。</p><h3 id="格式转换与ply文件生成"><a href="#格式转换与ply文件生成" class="headerlink" title="格式转换与ply文件生成"></a>格式转换与ply文件生成</h3><p>这一步其实相对简单，只需要根据上述生成的标签和颜色的对应关系，使用<code>Open3D</code>提供的一些api直接操作就可以了，代码如下：</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">from</span> asyncore <span class="token keyword">import</span> read<span class="token keyword">import</span> open3d <span class="token keyword">as</span> o3d<span class="token keyword">import</span> numpy <span class="token keyword">as</span> np<span class="token keyword">import</span> oscol_map <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token number">0.968598945752023</span><span class="token punctuation">,</span> <span class="token number">0.21265177717633077</span><span class="token punctuation">,</span> <span class="token number">0.21265177717633077</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token number">0.9593424395567822</span><span class="token punctuation">,</span> <span class="token number">0.43938701079007103</span><span class="token punctuation">,</span> <span class="token number">0.04942043921503769</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token number">0.9564083671463547</span><span class="token punctuation">,</span> <span class="token number">0.8441574631810681</span><span class="token punctuation">,</span> <span class="token number">0.17065203938934836</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token number">0.7119784414524474</span><span class="token punctuation">,</span> <span class="token number">0.9707467808994562</span><span class="token punctuation">,</span> <span class="token number">0.06505759283492496</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token number">0.4216596845499031</span><span class="token punctuation">,</span> <span class="token number">0.9746740070101805</span><span class="token punctuation">,</span> <span class="token number">0.20045395556579249</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token number">0.09410395585610232</span><span class="token punctuation">,</span> <span class="token number">0.9975270445459243</span><span class="token punctuation">,</span> <span class="token number">0.22316439709750563</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token number">0.08875664925141424</span><span class="token punctuation">,</span> <span class="token number">0.955616406724503</span><span class="token punctuation">,</span> <span class="token number">0.5841050820931795</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token number">0.22495255248804136</span><span class="token punctuation">,</span> <span class="token number">0.9708864249338678</span><span class="token punctuation">,</span> <span class="token number">0.9708864249338685</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token number">0.15853756200060765</span><span class="token punctuation">,</span> <span class="token number">0.6307409064043225</span><span class="token punctuation">,</span> <span class="token number">0.9848934147071097</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token number">0.08291138196093573</span><span class="token punctuation">,</span> <span class="token number">0.20910827660750841</span><span class="token punctuation">,</span> <span class="token number">0.9662896444869518</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token number">0.3989335698651475</span><span class="token punctuation">,</span> <span class="token number">0.17449579837215634</span><span class="token punctuation">,</span> <span class="token number">0.9600279985976244</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">11</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token number">0.7194960807027336</span><span class="token punctuation">,</span> <span class="token number">0.07306822754967035</span><span class="token punctuation">,</span> <span class="token number">0.9780672219639588</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token number">0.9692772940469393</span><span class="token punctuation">,</span> <span class="token number">0.05250565523033324</span><span class="token punctuation">,</span> <span class="token number">0.8383099170731375</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">13</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token number">0.9881871645219139</span><span class="token punctuation">,</span> <span class="token number">0.04214938209626784</span><span class="token punctuation">,</span> <span class="token number">0.4475941459929724</span><span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token keyword">def</span> <span class="token function">txt2ply</span><span class="token punctuation">(</span>txt_path<span class="token punctuation">,</span> ply_path<span class="token punctuation">,</span> label<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""    Convert txt file to ply file.    label = True: the last column is label: x y z label    label = False: the last column is color: x y z r g b    """</span>    <span class="token keyword">with</span> open<span class="token punctuation">(</span>txt_path<span class="token punctuation">,</span> <span class="token string">'r'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>        lines <span class="token operator">=</span> f<span class="token punctuation">.</span>readlines<span class="token punctuation">(</span><span class="token punctuation">)</span>    points <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    colors <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token keyword">if</span> label<span class="token punctuation">:</span>        <span class="token keyword">for</span> line <span class="token keyword">in</span> lines<span class="token punctuation">:</span>            line <span class="token operator">=</span> line<span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token punctuation">)</span>            points<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token punctuation">[</span>float<span class="token punctuation">(</span>line<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span> float<span class="token punctuation">(</span>line<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span> float<span class="token punctuation">(</span>line<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span>            colors<span class="token punctuation">.</span>append<span class="token punctuation">(</span>col_map<span class="token punctuation">[</span>int<span class="token punctuation">(</span>line<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span>            <span class="token comment" spellcheck="true">#colors.append(col_map[int(float(line[3]))])</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        <span class="token keyword">for</span> line <span class="token keyword">in</span> lines<span class="token punctuation">:</span>            line <span class="token operator">=</span> line<span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token punctuation">)</span>            points<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token punctuation">[</span>float<span class="token punctuation">(</span>line<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span> float<span class="token punctuation">(</span>line<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span> float<span class="token punctuation">(</span>line<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span>            colors<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token punctuation">[</span>float<span class="token punctuation">(</span>line<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">255</span><span class="token punctuation">,</span> float<span class="token punctuation">(</span>line<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">255</span><span class="token punctuation">,</span> float<span class="token punctuation">(</span>line<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">255</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># for line in lines:</span>    <span class="token comment" spellcheck="true">#     line = line.strip().split()</span>    <span class="token comment" spellcheck="true">#     points.append([float(line[0]), float(line[1]), float(line[2])])</span>    <span class="token comment" spellcheck="true">#     colors.append(col_map[int(float(line[3]))])</span>    <span class="token comment" spellcheck="true">#     print(int(float(line[3])))</span>    <span class="token comment" spellcheck="true"># print(colors)</span>    points <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span>points<span class="token punctuation">)</span>    mean_x<span class="token punctuation">,</span> mean_y<span class="token punctuation">,</span> mean_z <span class="token operator">=</span> np<span class="token punctuation">.</span>mean<span class="token punctuation">(</span>points<span class="token punctuation">,</span> axis<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># move to center</span>    points<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">-=</span> mean_x    points<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">-=</span> mean_y    points<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">-=</span> mean_z    <span class="token comment" spellcheck="true"># print(points)</span>    colors <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span>colors<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># print(colors)</span>    write_ply<span class="token punctuation">(</span>ply_path<span class="token punctuation">,</span> points<span class="token punctuation">,</span> colors<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">write_ply</span><span class="token punctuation">(</span>ply_path<span class="token punctuation">,</span> points<span class="token punctuation">,</span> colors<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""    Write ply file.    """</span>    pcd <span class="token operator">=</span> o3d<span class="token punctuation">.</span>geometry<span class="token punctuation">.</span>PointCloud<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># print(colors)</span>    pcd<span class="token punctuation">.</span>points <span class="token operator">=</span> o3d<span class="token punctuation">.</span>utility<span class="token punctuation">.</span>Vector3dVector<span class="token punctuation">(</span>points<span class="token punctuation">)</span>    pcd<span class="token punctuation">.</span>colors <span class="token operator">=</span> o3d<span class="token punctuation">.</span>utility<span class="token punctuation">.</span>Vector3dVector<span class="token punctuation">(</span>colors<span class="token punctuation">)</span>    o3d<span class="token punctuation">.</span>io<span class="token punctuation">.</span>write_point_cloud<span class="token punctuation">(</span>ply_path<span class="token punctuation">,</span> pcd<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">read_ply</span><span class="token punctuation">(</span>ply_path<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""    Read ply file.    """</span>    pcd <span class="token operator">=</span> o3d<span class="token punctuation">.</span>io<span class="token punctuation">.</span>read_point_cloud<span class="token punctuation">(</span>ply_path<span class="token punctuation">)</span>    <span class="token keyword">return</span> pcd<span class="token keyword">def</span> <span class="token function">generate_testData</span><span class="token punctuation">(</span>num<span class="token operator">=</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    points <span class="token operator">=</span> np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>randint<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> size<span class="token operator">=</span><span class="token punctuation">(</span>num<span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    labels <span class="token operator">=</span> np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>randint<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">13</span><span class="token punctuation">,</span> size<span class="token operator">=</span>num<span class="token punctuation">)</span>    data <span class="token operator">=</span> np<span class="token punctuation">.</span>hstack<span class="token punctuation">(</span><span class="token punctuation">(</span>points<span class="token punctuation">,</span> labels<span class="token punctuation">.</span>reshape<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">with</span> open<span class="token punctuation">(</span><span class="token string">'testData.txt'</span><span class="token punctuation">,</span> <span class="token string">'w'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>        <span class="token keyword">for</span> line <span class="token keyword">in</span> data<span class="token punctuation">:</span>            f<span class="token punctuation">.</span>write<span class="token punctuation">(</span><span class="token string">' '</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>map<span class="token punctuation">(</span>str<span class="token punctuation">,</span> line<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'\n'</span><span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    data_path <span class="token operator">=</span> <span class="token string">'data'</span>    save_path <span class="token operator">=</span> <span class="token string">'ply'</span>    <span class="token keyword">if</span> <span class="token operator">not</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>exists<span class="token punctuation">(</span>save_path<span class="token punctuation">)</span><span class="token punctuation">:</span>        os<span class="token punctuation">.</span>mkdir<span class="token punctuation">(</span>save_path<span class="token punctuation">)</span>    <span class="token keyword">for</span> file <span class="token keyword">in</span> os<span class="token punctuation">.</span>listdir<span class="token punctuation">(</span>data_path<span class="token punctuation">)</span><span class="token punctuation">:</span>        txt2ply<span class="token punctuation">(</span>os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>join<span class="token punctuation">(</span>data_path<span class="token punctuation">,</span> file<span class="token punctuation">)</span><span class="token punctuation">,</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>join<span class="token punctuation">(</span>save_path<span class="token punctuation">,</span> file<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token string">'.ply'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> label<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>为了能够在中心展示点云数据，在24行处将点云进行了平移操作；blender中的点云坐标数值不能太大，一般10左右就可以。使用<code>Open3D</code>进行初步可视化结果如下：</p><img src="https://raw.githubusercontent.com/mastercaiOSS/OSS/master/blog/2022/08-30-image-20220830095645245.png" style="zoom: 50%;"><p>这里，ply文件的转换就完成了，下面就进行blender的可视化操作</p><h2 id="blender可视化"><a href="#blender可视化" class="headerlink" title="blender可视化"></a>blender可视化</h2><p>由于我们想要达到一个点云旋转的效果，``Open3d`只能静态展示，因此需要借用blender这类专业3D建模软件。首先我们将介绍如何使用blender可视化一个点云，接着我们再介绍如何实现旋转的效果，最后说明一下如何导出视频.</p><h3 id="点云可视化-bpy插件"><a href="#点云可视化-bpy插件" class="headerlink" title="点云可视化-bpy插件"></a>点云可视化-bpy插件</h3><p>使用blender进行点云可视化需要借助一个插件<a href="https://github.com/uhlik/bpy" target="_blank" rel="noopener">bpy</a>，插件的功能和参数非常多，这里我们只需要用到几个比较简单的功能即可</p><h4 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h4><p>安装主要参考这篇<a href="https://blog.csdn.net/yi_777/article/details/108299270" target="_blank" rel="noopener">博文</a>，整体过程比较简单。首先需要将bpy插件从GitHub上下载下来，然后在菜单的“编辑-&gt;偏好设置-&gt;插件-&gt;安装”完成，选择需要安装的脚本文件即可，对于bpy插件即选择space_view3d_point_cloud_visualizer.py这个文件即可。然后在blender的右侧菜单就能看到该插件了。</p><h4 id="数据导入"><a href="#数据导入" class="headerlink" title="数据导入"></a>数据导入</h4><p>首先新建一个blender项目,删除项目初始的cube</p><img src="/Users/xudong/Library/Application Support/typora-user-images/image-20220830104718466.png" style="zoom: 25%;"><p>然后新建一个空物体</p><img src="https://raw.githubusercontent.com/mastercaiOSS/OSS/master/blog/2022/08-30-image-20220830104908697.png" style="zoom:25%;"><p>单击新建的空物体，在右侧插件中选择要可视化的ply文件，再点击“自由线”即可绘制出点云</p><img src="https://raw.githubusercontent.com/mastercaiOSS/OSS/master/blog/2022/08-30-image-20220830105504238.png" style="zoom:25%;"><p>可以调整参数对点云的点大小，透明度等效果进行调节</p><img src="https://raw.githubusercontent.com/mastercaiOSS/OSS/master/blog/2022/08-30-image-20220830105724990.png" style="zoom: 25%;"><h3 id="旋转效果生成"><a href="#旋转效果生成" class="headerlink" title="旋转效果生成"></a>旋转效果生成</h3><p>第一步我们已经得到了点云的静态可视化结果，下一步我们就要让点云旋转起来。说是点云旋转，但由于运动是相对的，我们可以通过旋转相机来实现相同的效果。下面我们就来设置相机旋转，主要参考<a href="https://www.bilibili.com/video/BV1Kp4y1W7X4?vd_source=d608e8f69a8f0aec740e78c355e9226f" target="_blank" rel="noopener">教程</a>的内容。</p><p>首先切换到顶视图(菜单栏：视图-&gt;视图-&gt;顶视图)，然后添加一个圆形曲线(菜单栏: 添加-&gt;曲线-&gt;圆环)，按“S”键调整圆环大小,使相机顶点处于圆环之上</p><img src="https://raw.githubusercontent.com/mastercaiOSS/OSS/master/blog/2022/08-30-image-20220830110843177.png" style="zoom:25%;"><p>调整到前视图，将圆环移动到和相机端点相同高度(快捷键“G”),然后为相机添加“跟随路径”约束(在右侧菜单栏)，目标就选择刚才设置的曲线，并同时点击“动画路径”按钮。此时相机会偏移到较远的位置，找到相机之后进行坐标归零操作(alt+G)，操作完成后效果如图，此时相机已经可以跟随圆环选择，但是视角不正确</p><img src="https://raw.githubusercontent.com/mastercaiOSS/OSS/master/blog/2022/08-30-image-20220830111437080.png" style="zoom:25%;"><p>接下来就是调整视角的操作。首先将鼠标移动到窗口右上角，点击并拖动可以新建一个工作窗口，其中一个窗口进入相机的活动视角(右键相机:设置活动摄像机)。再为相机添加一个标准约束，目标就选择空物体即可，这样就完成了初步的设置，再调整一下相机成像窗口的大小即可。最终效果如下图所示，根据这种方法还可以调节速度，定义其他更复杂的轨迹，但是目前展示没有用到，因此先到这一步即可。</p><img src="https://raw.githubusercontent.com/mastercaiOSS/OSS/master/blog/2022/08-30-image-20220830112350810.png" style="zoom: 33%;"><h3 id="视频导出和生成"><a href="#视频导出和生成" class="headerlink" title="视频导出和生成"></a>视频导出和生成</h3><p>由于blender无法渲染空物体，因此视频的导出需要借助插件本身来完成。点击插件的“渲染-&gt;animation”,即可生成相机视角的帧序列。此时生成的png图像默认为透明背景，导出视频后为黑色背景，因此我们先将其转换为jpg格式，即默认为白色背景:<code>for i in *.png; do sips -s format jpeg $i --out ${i%.*}.jpg;done;</code></p><p>然后，我们借助<code>ffmpeg</code>工具即可将所有帧生成一个完整的视频，命令为：<code>ffmpeg -threads 8 -i pcv_render_%03d.jpg output.mp4</code>，最后效果如下：</p><p><img src="https://raw.githubusercontent.com/mastercaiOSS/OSS/master/blog/2022/08-30-output_0003.gif" alt></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;使用blender进行点云可视化&quot;&gt;&lt;a href=&quot;#使用blender进行点云可视化&quot; class=&quot;headerlink&quot; title=&quot;使用blender进行点云可视化&quot;&gt;&lt;/a&gt;使用blender进行点云可视化&lt;/h1&gt;&lt;p&gt;最近做了一些点云可视化的工作
      
    
    </summary>
    
    
      <category term="科研工具" scheme="http://blog.master-cai.xyz/categories/%E7%A7%91%E7%A0%94%E5%B7%A5%E5%85%B7/"/>
    
    
      <category term="blender" scheme="http://blog.master-cai.xyz/tags/blender/"/>
    
      <category term="点云" scheme="http://blog.master-cai.xyz/tags/%E7%82%B9%E4%BA%91/"/>
    
      <category term="ply" scheme="http://blog.master-cai.xyz/tags/ply/"/>
    
      <category term="可视化" scheme="http://blog.master-cai.xyz/tags/%E5%8F%AF%E8%A7%86%E5%8C%96/"/>
    
      <category term="色彩搭配" scheme="http://blog.master-cai.xyz/tags/%E8%89%B2%E5%BD%A9%E6%90%AD%E9%85%8D/"/>
    
  </entry>
  
  <entry>
    <title>zotero通过multiple_profiles实现多文库</title>
    <link href="http://blog.master-cai.xyz/posts/25836.html"/>
    <id>http://blog.master-cai.xyz/posts/25836.html</id>
    <published>2022-02-11T13:29:06.000Z</published>
    <updated>2022-02-11T14:21:45.676Z</updated>
    
    <content type="html"><![CDATA[<h1 id="zotero通过multiple-profiles实现多文库"><a href="#zotero通过multiple-profiles实现多文库" class="headerlink" title="zotero通过multiple-profiles实现多文库"></a>zotero通过multiple-profiles实现多文库</h1><p>最近计划写一篇综述，这就需要读大量的文章，然而数百篇的文章如何有效管理就是一个很大的问题。简单的使用文件夹+tags的方法已经不能解决这个问题了，因此在<del>和导师保持一致</del>多方对比之后，我选择了zotero这个工具。关于zotero以及其他工具的对比不过多介绍，相关文章很多并且其本身使用也不是很复杂。</p><p>但是zotero在使用过程中有一个很大的痛点：它只支持创建一个文库，并且zotero里的tags、搜索和去重复文章都是文库级的。这意味着什么呢？意味着当你用多个collections来区别多个research或topic的时候，你对这些不同collections里的文章打的标签是在同一个搜索范围内的(无法实现在某个指定collection范围内进行搜索，去重和tag)。这就很使得整个文库非常的混乱，不便于管理。因此就有了创建多个文库的需求。但zotero官方并不推荐用户这样去使用，因此zotero创建多个文库的过程稍微有点麻烦，主要参考官方论坛的这个<a href="https://forums.zotero.org/discussion/71560/how-can-i-create-multiple-libraries-in-zotero" target="_blank" rel="noopener">帖子</a>,特此记录一下。</p><h2 id="创建步骤"><a href="#创建步骤" class="headerlink" title="创建步骤"></a>创建步骤</h2><p>zotero创建多个文库是通过创建多个profile并在启动时选择的方式完成的，具体步骤如下：</p><p>使用terminal启动zotero，在terminal中输入如下命令：</p><pre class="line-numbers language-bash"><code class="language-bash">/Applications/Zotero.app/Contents/MacOS/zotero -P<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>然后就可以打开zotero的profile manager:</p><img src="https://raw.githubusercontent.com/mastercaiOSS/OSS/master/blog/2022/02-11-image-20220211215503602.png" alt="image-20220211215503602" style="zoom:50%;"><p>然后选择create profile：</p><img src="https://raw.githubusercontent.com/mastercaiOSS/OSS/master/blog/2022/02-11-image-20220211220011599.png" alt="image-20220211220011599" style="zoom:50%;"><p>输入新的profile名称。可以先在桌面或者其他位置创建一个文件夹用来放置这个profile，没有试过直接用default folder(怕删除的时候会影响其他文库)。之后就会在这个文件夹里自动生成相关的文件了。</p><p>此时profile manager里就会出现刚刚创建的那个profile，然后选择这个profile就可以启动新的zotero了(还不算完)。</p><p>启动后会发现此时的zotero使用的文库还是和默认的那个是一样的，是因为这个新建的profile里使用的数据存储位置是默认的(和最初始的那个文库一样)，因此自然会加载默认的那个文库。解决方法也很简单：</p><p>在“首选项-&gt;高级-&gt;文件和文件夹”里修改“数据存储位置”为一个自定义的文件夹即可。</p><img src="https://raw.githubusercontent.com/mastercaiOSS/OSS/master/blog/2022/02-11-image-20220211220832605.png" alt="image-20220211220832605" style="zoom:50%;"><p>此时重启zotero并选择对应的profile就会发现已经是一个全新的文库了。但是使用zotfile配置onedrive进行同步的步骤不知道是否一致，有待验证。</p><p><img src="https://raw.githubusercontent.com/mastercaiOSS/OSS/master/blog/2022/02-11-image-20220211220856120.png" alt="image-20220211220856120"></p><h2 id="题外话"><a href="#题外话" class="headerlink" title="题外话"></a>题外话</h2><p>从最开始建立这个博客到现在转眼间已经有两年了(还差3天)，自己的身份也发生了很大的变化，再回过头来看从前自己记录的一些内容，不免回想起那段时光，有所感触。除了感慨时光飞逝之外，感觉之前记录的一些内容也确实很有意义，一方面这些内容很有实用价值，都是我真正面对并亲自解决的问题，以后再遇到类似的问题可以直接翻看当时的解决思路；另一方面也算是记录了我自己的成长过程，兴许数年之后(如果博客还在的话)再回过头来看一看会有不同的感慨吧。但是过去一年却只更新了寥寥数篇文章，难免有些遗憾。希望今年能多记录下来一些吧！</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;zotero通过multiple-profiles实现多文库&quot;&gt;&lt;a href=&quot;#zotero通过multiple-profiles实现多文库&quot; class=&quot;headerlink&quot; title=&quot;zotero通过multiple-profiles实现多文库&quot;&gt;
      
    
    </summary>
    
    
      <category term="科研工具" scheme="http://blog.master-cai.xyz/categories/%E7%A7%91%E7%A0%94%E5%B7%A5%E5%85%B7/"/>
    
    
      <category term="科研工具" scheme="http://blog.master-cai.xyz/tags/%E7%A7%91%E7%A0%94%E5%B7%A5%E5%85%B7/"/>
    
      <category term="zotero" scheme="http://blog.master-cai.xyz/tags/zotero/"/>
    
  </entry>
  
  <entry>
    <title>2D icp实现</title>
    <link href="http://blog.master-cai.xyz/posts/37385.html"/>
    <id>http://blog.master-cai.xyz/posts/37385.html</id>
    <published>2021-11-06T10:31:57.000Z</published>
    <updated>2021-11-07T11:56:08.365Z</updated>
    
    <content type="html"><![CDATA[<h1 id="2D-ICP原理和实现"><a href="#2D-ICP原理和实现" class="headerlink" title="2D ICP原理和实现"></a>2D ICP原理和实现</h1><p>ICP(Iterative Closest Point)是用于解决点云配准问题的一个经典算法，主要思想是先找到点集之间最近邻点之间的关系，然后用SVD分解计算变换矩阵，不断重复这个过程以达到最优效果。</p><h2 id="ICP算法步骤"><a href="#ICP算法步骤" class="headerlink" title="ICP算法步骤"></a>ICP算法步骤</h2><p>输入：给定的两个维度(二维)和数量相同的点集</p><ol><li>使用某种算法得到点集之间各个点的对应关系，如(KNN, K最近邻算法)</li><li>使用两个点集及其对应关系，用SVD方法计算点集之间的旋转</li><li>使用得到的最优旋转矩阵更新点集</li><li>重复上述过程, 直到误差变化幅度不大时停止</li></ol><h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><p>icp主干流程的实现：</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">icp</span><span class="token punctuation">(</span>A<span class="token punctuation">,</span> B<span class="token punctuation">,</span> max_iterations<span class="token operator">=</span><span class="token number">100</span><span class="token punctuation">,</span> error<span class="token operator">=</span><span class="token number">0.0000001</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># A和B是两个有n个点的n*2的二维点集</span>    src <span class="token operator">=</span> np<span class="token punctuation">.</span>copy<span class="token punctuation">(</span>A<span class="token punctuation">)</span>    dst <span class="token operator">=</span> np<span class="token punctuation">.</span>copy<span class="token punctuation">(</span>B<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 使用RSME作为误差</span>    RSME <span class="token operator">=</span> <span class="token number">0</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>max_iterations<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment" spellcheck="true"># get_correspondence函数用于计算两个点集之间的对应关系和距离</span>        <span class="token comment" spellcheck="true"># indices是dst点集中的点的下标</span>        distances<span class="token punctuation">,</span> indices <span class="token operator">=</span> get_correspondence<span class="token punctuation">(</span>src<span class="token punctuation">,</span> dst<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># T是根据对应关系，使用SVD算法求解出来的最优的变换矩阵</span>        T <span class="token operator">=</span> get_transform<span class="token punctuation">(</span>src<span class="token punctuation">,</span> dst<span class="token punctuation">[</span>indices<span class="token punctuation">,</span> <span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># 使用变换矩阵更新src</span>        <span class="token comment" spellcheck="true"># 为了能够直接使用T矩阵，需要将点集转化为齐次坐标</span>        homogeneous_src <span class="token operator">=</span> np<span class="token punctuation">.</span>ones<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> A<span class="token punctuation">.</span>shape<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        homogeneous_src<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token punctuation">:</span><span class="token punctuation">]</span> <span class="token operator">=</span> np<span class="token punctuation">.</span>copy<span class="token punctuation">(</span>src<span class="token punctuation">.</span>T<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># 更新src，src=T*src</span>        src <span class="token operator">=</span> np<span class="token punctuation">.</span>copy<span class="token punctuation">(</span>np<span class="token punctuation">.</span>dot<span class="token punctuation">(</span>T<span class="token punctuation">,</span> homogeneous_src<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span>T        <span class="token comment" spellcheck="true"># 计算RSME，继续进行迭代</span>        RSME <span class="token operator">=</span> np<span class="token punctuation">.</span>sqrt<span class="token punctuation">(</span>np<span class="token punctuation">.</span>mean<span class="token punctuation">(</span>distances <span class="token operator">**</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>RSME<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 计算最终的变换矩阵T，即原始点集A和经过多次变换之后的点集src之间的旋转</span>    T <span class="token operator">=</span> get_transform<span class="token punctuation">(</span>A<span class="token punctuation">,</span> src<span class="token punctuation">)</span>    <span class="token keyword">return</span> T<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>get_correspondence函数实现：</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">get_correspondence</span><span class="token punctuation">(</span>src<span class="token punctuation">,</span> dst<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""    Args:        src: n points of m dims, n*m(n*2)        dst: n points of m dims, n*m(n*2)    Returns:        distances: distances between corresponded pairs        indices: correspondences index of dst    """</span>    <span class="token comment" spellcheck="true"># 使用sklearn提供的KNN算法计算src和dst点集之间的对应关系</span>    neighbors <span class="token operator">=</span> NearestNeighbors<span class="token punctuation">(</span>n_neighbors<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span>    neighbors<span class="token punctuation">.</span>fit<span class="token punctuation">(</span>dst<span class="token punctuation">)</span>    distances<span class="token punctuation">,</span> indices <span class="token operator">=</span> neighbors<span class="token punctuation">.</span>kneighbors<span class="token punctuation">(</span>src<span class="token punctuation">,</span> return_distance<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># ravel()作用是将多维数组转化为一位数组</span>    <span class="token keyword">return</span> distances<span class="token punctuation">.</span>ravel<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> indices<span class="token punctuation">.</span>ravel<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>get_transform函数实现：</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">get_transform</span><span class="token punctuation">(</span>A<span class="token punctuation">,</span> B<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""    get transform matrix between A and B, points in A and B are corresponded.    Args:        A: n*2 points set        B: n*2 points set    Returns:        T: transform matrix between A and B    """</span>    <span class="token comment" spellcheck="true"># center_A和center_B分别是A和B点集的质心</span>    center_A <span class="token operator">=</span> np<span class="token punctuation">.</span>mean<span class="token punctuation">(</span>A<span class="token punctuation">,</span> axis<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span>    center_B <span class="token operator">=</span> np<span class="token punctuation">.</span>mean<span class="token punctuation">(</span>B<span class="token punctuation">,</span> axis<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 将A和B的点坐标进行归一化（重心对齐）</span>    normal_A <span class="token operator">=</span> A <span class="token operator">-</span> center_A    normal_B <span class="token operator">=</span> B <span class="token operator">-</span> center_B    <span class="token comment" spellcheck="true"># SVD分解求旋转矩阵R</span>    <span class="token comment" spellcheck="true"># W = P*Q_T (公式中的P是2*N的矩阵，而normal_A是N*2的矩阵，所以代码中为normal_A.T*normal_B)</span>    <span class="token comment" spellcheck="true"># W = U*∑*V_T</span>    <span class="token comment" spellcheck="true"># R = V*U_T</span>    W <span class="token operator">=</span> np<span class="token punctuation">.</span>dot<span class="token punctuation">(</span>normal_A<span class="token punctuation">.</span>T<span class="token punctuation">,</span> normal_B<span class="token punctuation">)</span>    U<span class="token punctuation">,</span> S<span class="token punctuation">,</span> V_T <span class="token operator">=</span> np<span class="token punctuation">.</span>linalg<span class="token punctuation">.</span>svd<span class="token punctuation">(</span>W<span class="token punctuation">)</span>    R <span class="token operator">=</span> np<span class="token punctuation">.</span>dot<span class="token punctuation">(</span>V_T<span class="token punctuation">.</span>T<span class="token punctuation">,</span> U<span class="token punctuation">.</span>T<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 参考代码，不是很懂这一步的意义</span>    <span class="token keyword">if</span> np<span class="token punctuation">.</span>linalg<span class="token punctuation">.</span>det<span class="token punctuation">(</span>R<span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">:</span>        V_T<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token punctuation">:</span><span class="token punctuation">]</span> <span class="token operator">*=</span> <span class="token operator">-</span><span class="token number">1</span>        R <span class="token operator">=</span> np<span class="token punctuation">.</span>dot<span class="token punctuation">(</span>V_T<span class="token punctuation">.</span>T<span class="token punctuation">,</span> U<span class="token punctuation">.</span>T<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 计算平移</span>    t <span class="token operator">=</span> center_B<span class="token punctuation">.</span>T <span class="token operator">-</span> np<span class="token punctuation">.</span>dot<span class="token punctuation">(</span>R<span class="token punctuation">,</span> center_A<span class="token punctuation">.</span>T<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 构造变换矩阵</span>    T <span class="token operator">=</span> np<span class="token punctuation">.</span>identity<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span>    T<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token punctuation">:</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> R<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token punctuation">:</span><span class="token number">2</span><span class="token punctuation">]</span>    T<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> t<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token number">2</span><span class="token punctuation">]</span>    <span class="token keyword">return</span> T<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>代码实现主要参考了<a href="https://github.com/ClayFlannigan/icp" target="_blank" rel="noopener">ICP</a>, 第一次自己实现的时候代码结构比较混乱，所有步骤都写在了ICP函数中，这对后来的调试产生了比较大的困扰，参考其他人的代码之后对代码重新进行了整理，这里给出的是二维的情况，如果要实现其他维度的ICP算法，原理也是相同的，只需要在该代码的基础上少量修改即可。</p><p>另外这个版本的ICP算法并没有考虑到点集之间存在缩放关系的情况，后续可以进一步改进。</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;2D-ICP原理和实现&quot;&gt;&lt;a href=&quot;#2D-ICP原理和实现&quot; class=&quot;headerlink&quot; title=&quot;2D ICP原理和实现&quot;&gt;&lt;/a&gt;2D ICP原理和实现&lt;/h1&gt;&lt;p&gt;ICP(Iterative Closest Point)是用于解决点
      
    
    </summary>
    
    
      <category term="算法" scheme="http://blog.master-cai.xyz/categories/%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="icp" scheme="http://blog.master-cai.xyz/tags/icp/"/>
    
  </entry>
  
  <entry>
    <title>服务器端使用jupyter lab配置Matlab踩坑记录</title>
    <link href="http://blog.master-cai.xyz/posts/12538.html"/>
    <id>http://blog.master-cai.xyz/posts/12538.html</id>
    <published>2021-10-25T13:09:16.000Z</published>
    <updated>2022-05-24T03:23:22.167Z</updated>
    
    <content type="html"><![CDATA[<h1 id="服务器端使用jupyter-lab配置Matlab踩坑记录"><a href="#服务器端使用jupyter-lab配置Matlab踩坑记录" class="headerlink" title="服务器端使用jupyter lab配置Matlab踩坑记录"></a>服务器端使用jupyter lab配置Matlab踩坑记录</h1><h2 id="jupyter配置"><a href="#jupyter配置" class="headerlink" title="jupyter配置"></a>jupyter配置</h2><p>前面的安装步骤很简单，安装教程安装即可：</p><pre class="line-numbers language-bash"><code class="language-bash">conda create -n matlab python<span class="token operator">=</span>3.6 <span class="token comment" spellcheck="true"># 创建虚拟环境，不创建也可</span>conda <span class="token function">install</span> -c conda-forge jupyterlabconda <span class="token function">install</span> -c conda-forge nodejs<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>不出意外的话，这时候jupyter已经可以跑起来了。命令如下:</p><pre class="line-numbers language-bash"><code class="language-bash">jupyter lab --port<span class="token operator">=</span>9000 --no-browser <span class="token operator">&amp;</span> <span class="token comment" spellcheck="true"># 端口号可以修改</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>但是这时候jupyter只是在服务器端启动了服务，想在本地访问，还需要讲本地端口映射到服务器端jupyter对应端口(9000)。也可以使用ip:port的方式直接访问，需要修改配置，这里没有使用。端口映射命令如下(这里将服务器端9000端口映射到本地9000端口):</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">ssh</span> -N -f -L 9000:localhost:9000 user@ip<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这时候在本地访问<code>localhost:9000</code>按理来说应该可以访问jupyter界面了，但是这里有两个坑点：</p><ol><li><p>jupyter lab 不支持python3.9，好像只支持2.7, 3.5, 3.6这几个版本，第一次安装的时候使用的python3.9，一直无法启动，最后新建python3.6的虚拟环境解决；</p></li><li><p>使用python3.6版本按照上述步骤安装之后，还是无法启动，会出现报错：<code>attributeerror: ‘extensionmanager‘ object has no attribute ‘_extensions‘</code>, 原因是库的版本问题，解决方案是</p><p><code>pip install nbclassic==0.2.8</code>。</p></li></ol><p>到这里，本地的jupyter应该就可以跑起来了。</p><h2 id="jupyter-matlab配置"><a href="#jupyter-matlab配置" class="headerlink" title="jupyter matlab配置"></a>jupyter matlab配置</h2><p>确认jupyter安装成功之后，开始配置matlab环境（需要确保服务器中已经安装了matlab）。</p><p>首先安装相关库：</p><pre class="line-numbers language-bash"><code class="language-bash">pip <span class="token function">install</span> matlab_kernel<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>安装之后，jupyter中应该就可以看到matlab_kernel了，但是这个时候如果直接使用，会报错：</p><p><img src="https://raw.githubusercontent.com/mastercaiOSS/OSS/master/blog/2021/10-25-image-20211025212718767.png" alt="image-20211025212718767"></p><p>出现这个图里的报错有两个原因，先讲第一个。上一步安装Matlab_kernel其实只是安装的第一步，为了能够真正使用调用服务器上的matlab，还需要到matlab的一个相关目录下进行手动安装，这个目录一般为：<code>/usr/local/matlab19b/extern/engines/python</code>,其中Matlab19b可能需要替换为相应版本的文件夹。该目录下有一个<code>setup.py</code>文件，就是安装文件。安装命令为：</p><pre class="line-numbers language-bash"><code class="language-bash">python setup.py <span class="token function">install</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>但是直接执行这个命令会出现权限问题，解决方案有两个：</p><ol><li>将<code>engines/python</code>这个文件夹的权限修改一下</li><li>修改相关目录<code>python setup.py build --build-base="/path/to/directory_you_can_write_to" install --prefix="/path/to/virtualenv/" --user</code></li></ol><p>到这一步matlab才算安装完成。但是这时候又出现了一些小插曲：matlab安装完成了，在ipython中可以正常<code>import matlab.engine</code>,但是在jupyter中仍然显示<code>matlab engine not installed</code>（上图）。仔细观察之后发现，报错信息中的路径是python3.9，而我此时使用的是新创建的虚拟环境（python3.6），因此确定了问题的原因应该是第一次安装的时候产生了一些kernel的配置文件，将kernel定位到了第一次安装时候的位置，只需要修改一下kernel的位置即可，解决方法如下：</p><pre class="line-numbers language-bash"><code class="language-bash">jupyter kernelspec list <span class="token comment" spellcheck="true"># 查看当前所有kernel以及相应位置</span><span class="token function">cd</span> \path\to\matlab_kernel <span class="token comment" spellcheck="true"># 此路径下有一个kernel.json文件，保存了这个kernel的相关信息</span>vim kernel.json <span class="token comment" spellcheck="true"># 修改路径信息到正确的位置即可</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>至此，在jupyter中就可以使用matlab了。另外还有一种方法据说可以修改kernel如图（没有尝试）：<img src="https://raw.githubusercontent.com/mastercaiOSS/OSS/master/blog/2021/10-25-20190908134023295.png" alt="20190908134023295"></p><h2 id="jupyterLab密码重置"><a href="#jupyterLab密码重置" class="headerlink" title="jupyterLab密码重置"></a>jupyterLab密码重置</h2><p>由于有一段时间没有使用，原先设置的密码忘记了，然后需要进行重置，查了很多修改配置文件的方案都没有成功，最后发现命令其实很简单：</p><pre class="line-numbers language-bash"><code class="language-bash">jupyter lab password<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>就 可 以 了😅</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;服务器端使用jupyter-lab配置Matlab踩坑记录&quot;&gt;&lt;a href=&quot;#服务器端使用jupyter-lab配置Matlab踩坑记录&quot; class=&quot;headerlink&quot; title=&quot;服务器端使用jupyter lab配置Matlab踩坑记录&quot;&gt;&lt;/a
      
    
    </summary>
    
    
      <category term="环境配置" scheme="http://blog.master-cai.xyz/categories/%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/"/>
    
    
      <category term="环境配置" scheme="http://blog.master-cai.xyz/tags/%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/"/>
    
  </entry>
  
  <entry>
    <title>Monocular Camera Localization in 3D LiDAR Maps</title>
    <link href="http://blog.master-cai.xyz/posts/37976.html"/>
    <id>http://blog.master-cai.xyz/posts/37976.html</id>
    <published>2021-09-17T02:03:46.000Z</published>
    <updated>2021-11-07T11:56:08.365Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Monocular-Camera-Localization-in-3D-LiDAR-Maps"><a href="#Monocular-Camera-Localization-in-3D-LiDAR-Maps" class="headerlink" title="Monocular Camera Localization in 3D LiDAR Maps"></a>Monocular Camera Localization in 3D LiDAR Maps</h1><h2 id="研究问题"><a href="#研究问题" class="headerlink" title="研究问题"></a>研究问题</h2><p>使用单相机在3D雷达地图中进行定位。</p><p>Localizing a camera in a given map is essential for vision-based navigation.</p><p>GPS存在的问题：While GPS can provide accurate position estimates at a global scale, it suffers from substantial errors due to multipath effects in <strong>urban canyons</strong> and does not provide sufﬁciently accurate estimates <strong>indoors</strong>.</p><p><img src="https://raw.githubusercontent.com/mastercaiOSS/OSS/master/blog/2021/10-01-image-20211001093846232.png" alt="image-20211001093846232"></p><h2 id="相关研究"><a href="#相关研究" class="headerlink" title="相关研究"></a>相关研究</h2><ol><li>A popular approach to mobile robot localization is to match sensor data against a previously acquired map.Many existing methods use the same sensor type for mapping and localization</li><li>However, the integration of both has mostly been done in the socalled back-end of the SLAM process and not by matching their data directly.</li></ol><h3 id="Lidars"><a href="#Lidars" class="headerlink" title="Lidars"></a>Lidars</h3><ol><li><p><strong>estimating incremental movements</strong></p><p>scan matching techniques based on variants of the Iterative Closest Point (ICP) algorithm</p></li><li><p><strong>detect loop closures</strong></p><p>feature-based approaches</p></li><li><p><strong>estimate consistent trajectories and maps</strong></p></li></ol><p>Modern methods often rely on graph-based optimization techniques.</p><h4 id="Advantage"><a href="#Advantage" class="headerlink" title="Advantage:"></a>Advantage:</h4><ol><li><p>LiDARs provide accurate range information</p></li><li><p>mostly invariant to lighting conditions</p></li></ol><h4 id="Disadvantages"><a href="#Disadvantages" class="headerlink" title="Disadvantages:"></a>Disadvantages:</h4><ol><li><p>expensive</p></li><li><p>heavy</p></li></ol><p>Since LiDARs provide accurate range information and are mostly invariant to lighting conditions, such methods have the potential to create highly accurate maps of indoor and outdoor environments. Localizing a LiDAR within these maps can be achieved with pure scan matching or using ﬁltering approaches.</p><h3 id="Visual-SLAM"><a href="#Visual-SLAM" class="headerlink" title="Visual SLAM"></a>Visual SLAM</h3><p>using images as only source of information, In contrast to SfM, visual SLAM target real-time applications typically</p><ol><li><p><strong>MonoSLAM</strong></p><p>ﬁrst system achieving real-time performance</p><p>based on an extended Kalman ﬁlter which estimates the cameras pose, velocity and feature positions.</p></li><li><p><strong>PTAM</strong></p><p>parallelize camera tracking and map building in order to utilize expensive optimization techniques without forfeiting real-time performance.</p></li></ol><h4 id="Advantage-1"><a href="#Advantage-1" class="headerlink" title="Advantage:"></a>Advantage:</h4><p>low-cost, lightweight, and widely available</p><h4 id="Disadvantages-1"><a href="#Disadvantages-1" class="headerlink" title="Disadvantages:"></a>Disadvantages:</h4><p>do not directly provide range information.</p><h4 id="visual-localization"><a href="#visual-localization" class="headerlink" title="visual localization"></a>visual localization</h4><p>The majority of research concerning visual localization has focused on matching photometric characteristics of the environment.</p><ul><li>comparing image feature descriptors like SIFT [12] or SURF [2]</li><li>directly operating on image intensity values</li></ul><h5 id="main-issues"><a href="#main-issues" class="headerlink" title="main issues:"></a><strong>main issues:</strong></h5><p>  environment’s photometric appearance changes substantially over time, especially across seasons.</p><p><strong>approach:</strong></p><ol><li><p>storing multiple image sequences for the same place from different times</p><ol start="2"><li>matching trajectories using a similarity matrix.</li></ol></li></ol><h3 id="camera-localization-in-geometric-maps-built-from-LiDAR-data"><a href="#camera-localization-in-geometric-maps-built-from-LiDAR-data" class="headerlink" title="camera localization in geometric maps built from LiDAR data"></a>camera localization in geometric maps built from LiDAR data</h3><p><strong>Wolcott et al</strong>: localize an autonomous vehicle in urban environments.</p><p>   Using LiDAR <strong>intensity values</strong>, they render a synthetic view of the mapped ground plane and match it against the camera image by maximizing normalized mutual information, only provides the 3-DoF pose.</p><p><strong>Pascoe et al.:</strong> Direct visual localisation and calibration for road vehicles in changing city environments</p><p>  Their appearance prior (map) combines geometric and photometric data and is used to render a view that is then matched against the live image by minimizing the normalized information distance. estimates the full 6-DoF camera pose.</p><p>  Both approaches perform matching in <strong>2D space</strong> and therefore require expensive image rendering supported by <strong>GPU</strong> hardware. Furthermore, their prior comprises LiDAR intensities or visual texture respectively.</p><h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><p>主要贡献，方法特色，主要假设</p><p><strong>Inputs：</strong></p><p>  an image stream and a map that is represented as a point cloud</p><p><strong>Output：</strong></p><p>  a 6-DoF camera pose estimate at frame rate.</p><p>Our approach builds on a <strong>visual odometry system</strong> that uses <strong>local bundle adjustment</strong> to reconstruct camera poses and a sparse set of 3D points from image features. Given the camera poses relative to these points, we indirectly localize the camera by aligning the reconstructed points with the map.</p><p>  The alignment is performed once the visual odometry, which is based on components of ORB-SLAM, provides the ﬁrst local reconstruction consisting of two keyframe poses and a minimal amount of 3D points.</p><p>  Since our approach is not intended for global localization, <strong>a coarse estimate</strong> for the transformation between this initial reconstruction and the map is required. Two poses are necessary to infer the initial scale.</p><p><img src="https://raw.githubusercontent.com/mastercaiOSS/OSS/master/blog/2021/10-01-image-20211001095230573.png" alt="image-20211001095230573"></p><h3 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h3><p>The visual odometry system reconstructs keyframe poses and 3D points by solving a local bundle adjustment problem.</p><p>Our method exploits the advantages of both sensors by using a LiDAR for mapping and a camera for localization.</p><p>we propose a novel approach, which tracks the pose of monocular camera with respect to a given 3D LiDAR map.</p><p>We employ a visual odometry system based on local bundle adjustment to reconstruct a sparse set of 3D points from image features. These points are continuously matched against the map to track the camera pose in an online fashion.</p><p>The key idea of our work is to approach visual localization by matching geometry.</p><p>In this paper we present a method to track the 6-DoF pose of a monocular camera in a 3D LiDAR map</p><p>Our method employs visual odometry to track the camera motion and to reconstruct a sparse set of 3D points via local bundle adjustment.For this purpose we rely on components of ORB-SLAM presented by Mur-Artal et al.</p><p>Our approach builds on a visual odometry system that uses local bundle adjustment to reconstruct camera poses and a sparse set of 3D points from image features. Given the camera poses relative to these points, we indirectly localize the camera by aligning the reconstructed points with the map.</p><ol><li>Local Reconstruction</li></ol><p>hat we use a consistent local reconstructio</p><ol><li>Data Association</li><li>Alignment</li></ol><h3 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h3><ol><li>Since it only relies on matching geometry, it is robust to changes in the photometric appearance of the environment</li><li>Utilizing panoramic LiDAR maps additionally provides viewpoint invariance.</li><li>Yet low-cost and lightweight camera sensors are used for tracking.</li></ol><h3 id="主要贡献"><a href="#主要贡献" class="headerlink" title="主要贡献"></a>主要贡献</h3><p>The main contribution of this work is to continuously align this point set with the given map by matching their geometry and applying an estimated similarity transformation to indirectly localize the camera.</p><h2 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h2><ol><li><p>visual odometry to track the 6-DoF camera pose</p></li><li><p>reconstruct a sparse set of 3D points via bundle adjustment</p></li><li><p>align the reconstructed points with the map by continuously applying an estimated similarity transformation to indirectly localize the camera.</p></li></ol><h3 id="Advantage-2"><a href="#Advantage-2" class="headerlink" title="Advantage:"></a>Advantage:</h3><ol><li>We argue that our approach is advantageous because the geometry of the environment tends to be more stable than its photometric appearance which can change tremendously even over short periods.</li><li>Our method exploits the advantages of both sensors by using a LiDAR for mapping and a camera for localization.Our method enables people to accurately localize themselves in these maps without being equipped with a LiDAR.</li></ol><h3 id="Disadvantages-2"><a href="#Disadvantages-2" class="headerlink" title="Disadvantages"></a>Disadvantages</h3><ol><li>Since our approach is not intended for global localization, a coarse estimate of the initial pose in this map is required.We employ a visual odometry system based on local bundle adjustment to reconstruct the camera poses relative to a sparse set of 3D points.</li></ol><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Monocular-Camera-Localization-in-3D-LiDAR-Maps&quot;&gt;&lt;a href=&quot;#Monocular-Camera-Localization-in-3D-LiDAR-Maps&quot; class=&quot;headerlink&quot; title=&quot;
      
    
    </summary>
    
    
      <category term="paper阅读" scheme="http://blog.master-cai.xyz/categories/paper%E9%98%85%E8%AF%BB/"/>
    
    
      <category term="IROS" scheme="http://blog.master-cai.xyz/tags/IROS/"/>
    
      <category term="Localization" scheme="http://blog.master-cai.xyz/tags/Localization/"/>
    
      <category term="Monocular Camera" scheme="http://blog.master-cai.xyz/tags/Monocular-Camera/"/>
    
      <category term="LiDAR" scheme="http://blog.master-cai.xyz/tags/LiDAR/"/>
    
  </entry>
  
  <entry>
    <title>Geometry-Aware Learning of Maps for Camera Localization</title>
    <link href="http://blog.master-cai.xyz/posts/45484.html"/>
    <id>http://blog.master-cai.xyz/posts/45484.html</id>
    <published>2021-09-14T03:18:06.000Z</published>
    <updated>2021-11-07T11:56:08.364Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Geometry-Aware-Learning-of-Maps-for-Camera-Localization"><a href="#Geometry-Aware-Learning-of-Maps-for-Camera-Localization" class="headerlink" title="Geometry-Aware Learning of Maps for Camera Localization"></a>Geometry-Aware Learning of Maps for Camera Localization</h1><h2 id="研究问题"><a href="#研究问题" class="headerlink" title="研究问题"></a>研究问题</h2><h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><h2 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h2><h2 id="优缺点，改进方向"><a href="#优缺点，改进方向" class="headerlink" title="优缺点，改进方向"></a>优缺点，改进方向</h2><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Geometry-Aware-Learning-of-Maps-for-Camera-Localization&quot;&gt;&lt;a href=&quot;#Geometry-Aware-Learning-of-Maps-for-Camera-Localization&quot; class=&quot;h
      
    
    </summary>
    
    
      <category term="paper阅读" scheme="http://blog.master-cai.xyz/categories/paper%E9%98%85%E8%AF%BB/"/>
    
    
  </entry>
  
  <entry>
    <title>paper_test</title>
    <link href="http://blog.master-cai.xyz/posts/48165.html"/>
    <id>http://blog.master-cai.xyz/posts/48165.html</id>
    <published>2021-09-13T13:20:59.000Z</published>
    <updated>2021-09-13T13:21:32.955Z</updated>
    
    <content type="html"><![CDATA[<h1 id="title-one"><a href="#title-one" class="headerlink" title="title one"></a>title one</h1><h2 id="title-two"><a href="#title-two" class="headerlink" title="title two"></a>title two</h2><p>content</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;title-one&quot;&gt;&lt;a href=&quot;#title-one&quot; class=&quot;headerlink&quot; title=&quot;title one&quot;&gt;&lt;/a&gt;title one&lt;/h1&gt;&lt;h2 id=&quot;title-two&quot;&gt;&lt;a href=&quot;#title-two&quot; class
      
    
    </summary>
    
    
      <category term="paper阅读" scheme="http://blog.master-cai.xyz/categories/paper%E9%98%85%E8%AF%BB/"/>
    
    
  </entry>
  
  <entry>
    <title>macos通过ssh连接服务器调用GUI程序</title>
    <link href="http://blog.master-cai.xyz/posts/47486.html"/>
    <id>http://blog.master-cai.xyz/posts/47486.html</id>
    <published>2021-09-12T07:11:13.000Z</published>
    <updated>2022-05-24T03:19:17.013Z</updated>
    
    <content type="html"><![CDATA[<h1 id="macos通过ssh连接服务器调用GUI程序"><a href="#macos通过ssh连接服务器调用GUI程序" class="headerlink" title="macos通过ssh连接服务器调用GUI程序"></a>macos通过ssh连接服务器调用GUI程序</h1><p>在Windows上远程连接服务器，如果想调用服务器上的图形化应用，可以使用mobaxterm这样的第三方工具实现，可以开箱即用，不用过多配置；但由于macos上没有类似的集成好的软件，所以需要额外配置一下。</p><h2 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h2><p>原理是基于 X11 Forwarding 技术 + XQuartz第三方工具来实现的(转载自<a href="https://www.macrjy.com/t/3654)。" target="_blank" rel="noopener">https://www.macrjy.com/t/3654)。</a></p><p>原生的Linux系统本来就是没有图形化界面的，图形化界面只是Linux系统中的一个应用程序。Linux系统中的图形化界面，都是基于X协议。</p><p>X 协议由 X server 和 X client 组成：</p><ul><li>X server 管理主机上与显示相关的硬件设置（如显卡、硬盘、鼠标等），它负责屏幕画面的绘制与显示，以及将输入设置（如键盘、鼠标）的动作告知 X client。</li><li>X client (即 X 应用程序) 则主要负责事件的处理（即程序的逻辑）。</li></ul><p>举个例子，如果用户点击了鼠标左键，因为鼠标归 X server 管理，于是 X server 就捕捉到了鼠标点击这个动作，然后它将这个动作告诉 X client，因为 X client 负责程序逻辑，于是 X client 就根据程序预先设定的逻辑（例如画一个圆），告诉 X server 说：“请在鼠标点击的位置，画一个圆”。最后，X server 就响应 X client 的请求，在鼠标点击的位置，绘制并显示出一个圆。</p><p><img src="https://raw.githubusercontent.com/mastercaiOSS/OSS/master/blog/2021/09-12-HxES4t.jpg" alt></p><p>许多时候 X server 和 X client 在同一台主机上，这看起来没什么。但是， X server 和 X client 完全可以运行在不同的机器上，只要彼此通过 X 协议通信即可。于是，我们就可以做一些 “神奇” 的事情，比如像本文开头谈到的，在本地显示 (X server)，运行在服务器上的 GUI 程序 (X client)。这样的操作可以通过 SSH X11 Forwarding (转发) 来实现。</p><p>X11 中的 X 指的就是 X 协议，11 指的是采用 X 协议的第 11 个版本。</p><h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><h3 id="服务器端"><a href="#服务器端" class="headerlink" title="服务器端"></a>服务器端</h3><ol><li>修改ssh配置文件(/etc/ssh/sshd_config)</li></ol><p>添加或取消下面两条代码的注释：</p><pre class="line-numbers language-bash"><code class="language-bash">X11Forwarding <span class="token function">yes</span>X11DisplayOffset 10<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>如图所示：</p><p><img src="https://raw.githubusercontent.com/mastercaiOSS/OSS/master/blog/2021/09-12-1ivEZ8.png" alt></p><ol start="2"><li>安装xauth</li></ol><p>在系统中安装xauth（以ubuntu系统为例）</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">sudo</span> apt <span class="token function">install</span> xauth<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>至此，服务器端配置完成</p><h3 id="Macos端"><a href="#Macos端" class="headerlink" title="Macos端"></a>Macos端</h3><ol><li>安装XQuartz</li></ol><pre class="line-numbers language-bash"><code class="language-bash">brew <span class="token function">install</span> xquartz<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="2"><li>在终端中输入如下命令：</li></ol><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">export</span> DISPLAY<span class="token operator">=</span>:0<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>Ps: 如果使用XQuartz自带的terminal里使用，无需此命令；如果要在iterm等其他terminal中使用，需要输入此命令。</p><ol start="2"><li>ssh连接</li></ol><p>使用ssh进行连接前，需要保持XQuartz处于开启状态</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">ssh</span> -Y user@IP<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>Ps: 在XQuartz自带的terminal里使用时可以使用-X参数，其他terminal中只能使用-Y参数。</p><h2 id="2022年5月24日更新"><a href="#2022年5月24日更新" class="headerlink" title="2022年5月24日更新"></a>2022年5月24日更新</h2><p>最近在使用的时候出现了一些奇怪的问题，服务器和本地的配置都没有修改过但是图形界面转发却不工作了。在mac端iterm2上使用eog命令查看服务器上的图片时，出现如下报错：</p><pre><code>Invalid MIT-MAGIC-COOKIE-1 keyUnable to init server</code></pre><p>经过多次尝试不同的方案，最终在mac端的本地终端上执行如下命令解决：</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">sudo</span> xhost + user@ip<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>具体原因暂时未知，特此记录一下。</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;macos通过ssh连接服务器调用GUI程序&quot;&gt;&lt;a href=&quot;#macos通过ssh连接服务器调用GUI程序&quot; class=&quot;headerlink&quot; title=&quot;macos通过ssh连接服务器调用GUI程序&quot;&gt;&lt;/a&gt;macos通过ssh连接服务器调用GUI
      
    
    </summary>
    
    
      <category term="环境配置" scheme="http://blog.master-cai.xyz/categories/%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/"/>
    
    
      <category term="环境配置" scheme="http://blog.master-cai.xyz/tags/%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/"/>
    
  </entry>
  
  <entry>
    <title>ssh免密登陆连接配置</title>
    <link href="http://blog.master-cai.xyz/posts/33122.html"/>
    <id>http://blog.master-cai.xyz/posts/33122.html</id>
    <published>2021-08-11T14:55:22.000Z</published>
    <updated>2021-09-12T07:13:35.988Z</updated>
    
    <content type="html"><![CDATA[<h1 id="ssh免密登陆连接配置"><a href="#ssh免密登陆连接配置" class="headerlink" title="ssh免密登陆连接配置"></a>ssh免密登陆连接配置</h1><h2 id="1-生成ssh-key"><a href="#1-生成ssh-key" class="headerlink" title="1. 生成ssh key"></a>1. 生成ssh key</h2><p>进入～/.ssh 目录，生成ssh key</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">cd</span> ~/.sshssh-keygen <span class="token comment" spellcheck="true">#生成默认密钥对 公钥id_rsa.pub 私钥id_rsa</span><span class="token comment" spellcheck="true"># 也可以通过参数进行指定 ssh-keygen -t rsa -C xxx@xx.com</span><span class="token comment" spellcheck="true"># 生成过程中可以指定密钥对的名称，否则默认为id_rsa</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>~/.ssh目录是用来存放ssh key的目录，目录下主要有密钥对，config文件和known_hosts文件。config文件主要用来给通过ssh连接的服务器配置别名，方便连接；known_hosts文件是为了验证连接服务器的安全性。当第一次通过ssh连接到服务器A时，A会传递一个公钥给host，host会将这个公钥保存到known_hosts中，以后每次连接，都会验证A的公钥是否和在known_hosts中的公钥是否匹配，以此防范DNS Hijack之类的攻击。known_hosts文件如图：<img src="https://raw.githubusercontent.com/mastercaiOSS/OSS/master/blog/2021/08-12-SJVhch.png" alt></p><h2 id="2-上传公钥到服务器"><a href="#2-上传公钥到服务器" class="headerlink" title="2.上传公钥到服务器"></a>2.上传公钥到服务器</h2><p>将生成的公钥上传到需要登陆的服务器上，完成配对。（配置多个服务器时不需要重复生成密钥，直接上传已有的公钥即可）</p><pre class="line-numbers language-bash"><code class="language-bash">ssh-copy-id -i id_rsa.pub user@host<span class="token comment" spellcheck="true"># 使用命令自动在服务器端部署公钥，无需手动注册 id_rsa.pub为默认公钥名称，可根据情况修改</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>完成这一步就可以免密登陆了。</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">ssh</span> user@host<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>但是为了更方便，可以使用config文件给服务器配置别名</p><h2 id="3-配置服务器别名"><a href="#3-配置服务器别名" class="headerlink" title="3.配置服务器别名"></a>3.配置服务器别名</h2><p>使用config文件给服务器配置别名，config文件配置格式如下：</p><pre><code>Host alias # 服务器的别名  HostName 192.168.2.8 # 服务器地址  User parallels # 登陆用户名  Port 22 # ssh默认端口  IdentityFile ~/.ssh/id_rsa # 使用的私钥文件Host alias2...</code></pre><p>配置完成后，即可使用<code>ssh alias</code>命令直接登陆服务器了。</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;ssh免密登陆连接配置&quot;&gt;&lt;a href=&quot;#ssh免密登陆连接配置&quot; class=&quot;headerlink&quot; title=&quot;ssh免密登陆连接配置&quot;&gt;&lt;/a&gt;ssh免密登陆连接配置&lt;/h1&gt;&lt;h2 id=&quot;1-生成ssh-key&quot;&gt;&lt;a href=&quot;#1-生成ss
      
    
    </summary>
    
    
      <category term="环境配置" scheme="http://blog.master-cai.xyz/categories/%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/"/>
    
    
      <category term="环境配置" scheme="http://blog.master-cai.xyz/tags/%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/"/>
    
  </entry>
  
  <entry>
    <title>ROS入门之Topic和Server编程</title>
    <link href="http://blog.master-cai.xyz/posts/34444.html"/>
    <id>http://blog.master-cai.xyz/posts/34444.html</id>
    <published>2021-07-05T08:00:58.000Z</published>
    <updated>2021-07-14T00:46:34.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="ROS入门之Topic和Server编程"><a href="#ROS入门之Topic和Server编程" class="headerlink" title="ROS入门之Topic和Server编程"></a>ROS入门之Topic和Server编程</h1><p>Topic和Server是ROS中非常重要的两种通信机制，下面分别对其进行介绍。</p><h2 id="Topic"><a href="#Topic" class="headerlink" title="Topic"></a>Topic</h2><h3 id="Publisher和Subscriber"><a href="#Publisher和Subscriber" class="headerlink" title="Publisher和Subscriber"></a>Publisher和Subscriber</h3><p>Topic的结构如图所示：</p><p><img src="https://raw.githubusercontent.com/Master-cai/oss/master/blog/2021/07-05-ymBvxr.png?token=AI5S4MM7Q4WVMDL4EPOC5PTA4LOFA" alt></p><p>Publisher节点按照规定格式发布消息到Topic中，Subscriber通过订阅Topic来获取数据。</p><p>下面是使用Publisher来控制turtle速度的例子：</p><pre class="line-numbers language-c++"><code class="language-c++">#include<ros/ros.h>#include<geometry_msgs/Twist.h>int main(int argc, char **argv){    # 初始化Node    ros::init(argc, argv, "velocity_publisher");    # 创建Node句柄，对当前Node进行操作    ros::NodeHandle n;    # 定义一个Publisher，对“/turtle1/cmd_vel“进行订阅    # Publisher由NodeHandle.advertise函数进行创建，模版中确定该    # Publisher定义的topic中的消息结构，函数参数为Topic名称和消息    # 队列的长度    ros::Publisher turtle_vel_pub = n.advertise<geometry_msgs::Twist>("/turtle1/cmd_vel", 10);    # 定义循环的频率    ros::Rate loop_rate(10);    # 配合loop_rate控制程序执行的频率    while (ros::ok())    {        # 定义消息类型实例        geometry_msgs::Twist vel_msg;        # 线速度        vel_msg.linear.x=0.5;        # 角速度        vel_msg.angular.z = 0.2;        # 向topic中发布消息        turtle_vel_pub.publish(vel_msg);        # 向控制台输出log        ROS_INFO("publish turtle velocity command [%0.2f m/s, %0.2f rad/s]", vel_msg.linear.x, vel_msg.angular.z);        # 控制循环频率        loop_rate.sleep();    }    return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>实现一个Publisher主要流程为：</p><ol><li>初始化ROS节点并生成一个句柄</li><li>实例化Publisher，定义需要publish的消息类型，Topic，buffer size等信息</li><li>创建消息</li><li>按照一定频率发布消息</li></ol><p>在控制turtlesim的运动之后，我们还可以实时接收turtle的位置信息，具体代码如下：</p><pre class="line-numbers language-c++"><code class="language-c++">#include<ros/ros.h>#include "turtlesim/Pose.h"# 回调函数void poseCallback(const turtlesim::Pose::ConstPtr& msg){    # 向控制台输出log信息    ROS_INFO("turtle pose: x:%0.6f, y:%0.6f", msg->x, msg->y);}int main(int argc, char **argv){    # 初始化节点    ros::init(argc, argv, "pose_subscriber");    # 创建句柄    ros::NodeHandle n;    # 定义Subscriber对“/turtle1/pose”进行subscribe    # n.subscribe这里定义的是一个回调函数的形式，并不会立即执行    # 其参数为 (Topic name, buffer size, callback func)    ros:: Subscriber pos_sub = n.subscribe("/turtle1/pose", 10, poseCallback);    # 循环等待接收Topic发来的数据，调用回调函数    ros::spin();    return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>实现一个订阅者的主要流程为：</p><ol><li>初始化ROS节点并创建句柄</li><li>Subscribe一个Topic，并定义回调函数</li><li>循环等待消息，并在回调函数中进行处理</li></ol><p>上述代码都需要遵循cmake的编译规则，在相应的CMakeList.txt中进行配置。以Subscriber为例，配置如下：</p><pre class="line-numbers language-cmake"><code class="language-cmake">add_executable(pose_subscriber src/pose_subscriber.cpp)target_link_libraries(pose_subscriber ${catkin_LIBRARIES})<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>修改好CMake配置之后，再进入catkin_ws文件夹执行<code>catkin_make</code>命令进行编译。编译完成后，使用<code>rosrun</code>命令运行Node，如图所示：</p><p><img src="https://raw.githubusercontent.com/Master-cai/oss/master/blog/2021/07-06-XKS0wZ.png?token=AI5S4ML2XTGJ42ML3FQRONLA4PF32" alt></p><p>同样，Publisher和Subscriber也可以用python代码实现，ROS中默认使用的是python2.7，一般在package下新建一个script文件夹存放python文件。Publisher和Subscriber的python代码如下：</p><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#!/usr/bin/env python</span><span class="token comment" spellcheck="true"># -*- coding: utf-8 -*-</span><span class="token comment" spellcheck="true"># velocity_publisher.py</span><span class="token keyword">import</span> rospy<span class="token keyword">from</span> geometry_msgs<span class="token punctuation">.</span>msg <span class="token keyword">import</span> Twist<span class="token keyword">def</span> <span class="token function">velocity_publisher</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    rospy<span class="token punctuation">.</span>init_node<span class="token punctuation">(</span><span class="token string">"velocity_publisher"</span><span class="token punctuation">,</span> anonymous<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>    turtle_vel_pub <span class="token operator">=</span> rospy<span class="token punctuation">.</span>Publisher<span class="token punctuation">(</span><span class="token string">'/turtle1/cmd_vel'</span><span class="token punctuation">,</span> Twist<span class="token punctuation">,</span> queue_size<span class="token operator">=</span><span class="token number">10</span><span class="token punctuation">)</span>    rate <span class="token operator">=</span> rospy<span class="token punctuation">.</span>Rate<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span>    <span class="token keyword">while</span> <span class="token operator">not</span> rospy<span class="token punctuation">.</span>is_shutdown<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        vel_msg <span class="token operator">=</span> Twist<span class="token punctuation">(</span><span class="token punctuation">)</span>        vel_msg<span class="token punctuation">.</span>linear<span class="token punctuation">.</span>x <span class="token operator">=</span> <span class="token number">0.5</span>        vel_msg<span class="token punctuation">.</span>angular<span class="token punctuation">.</span>z <span class="token operator">=</span> <span class="token number">0.5</span>        turtle_vel_pub<span class="token punctuation">.</span>publish<span class="token punctuation">(</span>vel_msg<span class="token punctuation">)</span>        rospy<span class="token punctuation">.</span>loginfo<span class="token punctuation">(</span><span class="token string">"Publish turtle velocity command[%0.2f m/s, %0.2f rad/s]"</span><span class="token punctuation">,</span> vel_msg<span class="token punctuation">.</span>linear<span class="token punctuation">.</span>x<span class="token punctuation">,</span> vel_msg<span class="token punctuation">.</span>angular<span class="token punctuation">.</span>z<span class="token punctuation">)</span>        rate<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">"__main__"</span><span class="token punctuation">:</span>    <span class="token keyword">try</span><span class="token punctuation">:</span>        velocity_publisher<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">except</span> rospy<span class="token punctuation">.</span>ROSInterruptException<span class="token punctuation">:</span>        <span class="token keyword">pass</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Subscriber代码如下：</p><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#!/usr/bin/env python</span><span class="token comment" spellcheck="true"># pose_subscriber.py</span><span class="token keyword">import</span> rospy<span class="token keyword">from</span> turtlesim<span class="token punctuation">.</span>msg <span class="token keyword">import</span> Pose<span class="token keyword">def</span> <span class="token function">poseCallback</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span><span class="token punctuation">:</span>    rospy<span class="token punctuation">.</span>loginfo<span class="token punctuation">(</span><span class="token string">"Turtle pose: x:%0.6f, y:%0.6f"</span><span class="token punctuation">,</span> msg<span class="token punctuation">.</span>x<span class="token punctuation">,</span> msg<span class="token punctuation">.</span>y<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">pose_subscriber</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    rospy<span class="token punctuation">.</span>init_node<span class="token punctuation">(</span><span class="token string">'pose_subscriber'</span><span class="token punctuation">,</span> anonymous<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>    rospy<span class="token punctuation">.</span>Subscriber<span class="token punctuation">(</span><span class="token string">'/turtle1/pose'</span><span class="token punctuation">,</span> Pose<span class="token punctuation">,</span> poseCallback<span class="token punctuation">)</span>    rospy<span class="token punctuation">.</span>spin<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">"__main__"</span><span class="token punctuation">:</span>    pose_subscriber<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>python代码无需编译，因此也不需要对CMakelist.txt进行修改，但是需要给python文件添加执行权限，如：</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">chmod</span> +x /home/mastercai/catkin_ws/src/learning_topic/script/velocity_publisher.py <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>然后直接执行rosrun命令即可：</p><pre class="line-numbers language-bash"><code class="language-bash">rosrun learning_topic velocity_publisher.py<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="自定义massage"><a href="#自定义massage" class="headerlink" title="自定义massage"></a>自定义massage</h3><p>除了使用ROS中预定义好的massage，ROS还可以自定消息类型，下面以Person信息来举例说明。</p><p>ROS中的自定义消息通过.msg文件定义，一般都放在package目录下的msg文件夹。在msg文件夹下新建Person.msg文件：</p><pre><code>string nameuint8 sexuint8 ageuint8 unknown = 0uint8 male = 1uint8 female = 2</code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;ROS入门之Topic和Server编程&quot;&gt;&lt;a href=&quot;#ROS入门之Topic和Server编程&quot; class=&quot;headerlink&quot; title=&quot;ROS入门之Topic和Server编程&quot;&gt;&lt;/a&gt;ROS入门之Topic和Server编程&lt;/h1&gt;&lt;
      
    
    </summary>
    
    
      <category term="ROS" scheme="http://blog.master-cai.xyz/categories/ROS/"/>
    
    
      <category term="ROS" scheme="http://blog.master-cai.xyz/tags/ROS/"/>
    
  </entry>
  
  <entry>
    <title>ROS入门之核心概念和系统安装</title>
    <link href="http://blog.master-cai.xyz/posts/18209.html"/>
    <id>http://blog.master-cai.xyz/posts/18209.html</id>
    <published>2021-07-04T13:36:44.000Z</published>
    <updated>2021-07-14T00:45:58.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="ROS入门之核心概念和系统安装"><a href="#ROS入门之核心概念和系统安装" class="headerlink" title="ROS入门之核心概念和系统安装"></a>ROS入门之核心概念和系统安装</h1><h2 id="ROS简介"><a href="#ROS简介" class="headerlink" title="ROS简介"></a>ROS简介</h2><p>ROS(robot operating system)是一个开源的机器人操作系统，最早起源于2007年斯坦福大学willow garage的个人项目。ROS提供机器人硬件抽象描述，底层驱动，节点间的消息传递，程序包管理等功能，用于构建一个完整的机器人系统。ROS系统主要由node， topic，service等结构构成。</p><p>ROS每两年更新一个大版本，每个版本对应一个ubuntu版本，如图所示：<img src="https://raw.githubusercontent.com/mastercaiOSS/OSS/master/blog/2021/07-14-HuwjZm.png" alt>其中kinetic版本对应ubuntu16， melodic对应ubuntu18（最新版本为2020年5月发布的noetic）。ROS目前已经发展到ROS 2版本，但是ROS 2并不是对ROS 1的取代，而是对ROS 1的进一步完善，目前主流应用还是基于ROS 1版本构建。目前，ROS相关的资料也非常多，主要参考<a href="http://wiki.ros.org/cn" target="_blank" rel="noopener">ROS wiki</a>即可解决大部分问题。</p><h2 id="ROS-melodic安装（ubuntu-18）"><a href="#ROS-melodic安装（ubuntu-18）" class="headerlink" title="ROS melodic安装（ubuntu 18）"></a>ROS melodic安装（ubuntu 18）</h2><p>ROS的安装过程在ros的wiki上写的非常清楚，按照步骤执行就可以，这里简要贴一下命令。</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 设置ROS软件源</span><span class="token function">sudo</span> sh -c <span class="token string">'echo "deb http://packages.ros.org/ros/ubuntu <span class="token variable"><span class="token variable">$(</span>lsb_release -sc<span class="token variable">)</span></span> main" > /etc/apt/sources.list.d/ros-latest.list'</span><span class="token comment" spellcheck="true"># 添加密钥</span><span class="token function">sudo</span> apt-key adv --keyserver <span class="token string">'hkp://keyserver.ubuntu.com:80'</span> --recv-key C1CF6E31E6BADE8868B172B4F42ED6FBAB17C654<span class="token comment" spellcheck="true"># 安装ROS</span><span class="token function">sudo</span> apt <span class="token function">install</span> ros-melodic-desktop-full<span class="token comment" spellcheck="true"># 初始化rosdep</span><span class="token function">sudo</span> rosdep initrosdep update<span class="token comment" spellcheck="true"># 设置环境变量</span><span class="token keyword">echo</span> <span class="token string">"source /opt/ros/melodic/setup.bash"</span> <span class="token operator">>></span> ~/.bashrc<span class="token function">source</span> ~/.bashrc<span class="token comment" spellcheck="true"># 安装rosinstall</span><span class="token function">sudo</span> <span class="token function">apt-get</span> <span class="token function">install</span> python-rosinstall python-rosinstall-generator python-wstool build-essential<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这里初始化rosdep这一步中，rosdep update命令经常由于网络问题无法正常执行（修改host无效），将会影响到后续的操作，可以通过修改20-default.list文件使用gitee备份源来解决问题，具体操作见<a href="https://mp.weixin.qq.com/s/mghnF4sesImHpg4ScZ-bRA" target="_blank" rel="noopener">链接</a>。</p><p>安装完成之后，执行一下<code>roscore</code>测试一下安装是否成功，效果如图：</p><p><img src="https://raw.githubusercontent.com/mastercaiOSS/OSS/master/blog/2021/07-14-iKIHLu.png" alt></p><h2 id="核心概念"><a href="#核心概念" class="headerlink" title="核心概念"></a>核心概念</h2><p>ROS的核心概念主要有 Node, Topic, Service和ROS Master，下面先分别对每个概念进行解释。</p><h3 id="Node"><a href="#Node" class="headerlink" title="Node"></a>Node</h3><p>ROS 中每个执行具体任务的单元都成为一个Node，一个Node通常为一个可执行文件，不同的节点可以用不同的语言编写，也可以运行在不同机器上，但是每个Node的名称必须唯一。</p><h3 id="Topic"><a href="#Topic" class="headerlink" title="Topic"></a>Topic</h3><p>Topic是节点之间传输消息的一种多对多的方式。在Topic模型中，消息的发送者被称为Publisher，接受者被称为Subscriber，Publisher将消息发送到Topic中，然后Subscriber订阅这个Topic来收取消息，这个过程是异步进行的，比较类似于操作系统中的消费者和生产者的模型，Topic就充当了buffer的角色。Publisher发布消息时需要遵守一定的规则，其发出的消息结构需要提前在.msg格式的文件中进行定义。这三者的关系如图所示：<img src="https://raw.githubusercontent.com/mastercaiOSS/OSS/master/blog/2021/07-14-BJsupT.png" alt></p><h3 id="Service"><a href="#Service" class="headerlink" title="Service"></a>Service</h3><p><img src="https://raw.githubusercontent.com/mastercaiOSS/OSS/master/blog/2021/07-14-Avkt2p.png" style="zoom:50%; float: right">Service是C/S架构的同步消息通信模型，传递消息时，首先由client对server发出请求，当server处理完成后，再给client返回数据，这个过程是同步进行的，一个server可以被多个client请求。和Topic类似，service模型在通信时传递的消息结构也是提前定义好的，需要在.srv文件中进行声明。service示意图如图所示：</p><h3 id="ROS-Master"><a href="#ROS-Master" class="headerlink" title="ROS Master"></a>ROS Master</h3><p>ROS Master是整个ROS系统的控制中心，所有的node节点都需要注册到ROS Master中才能正常在整个系统中使用。ROS Master负责连接所有Topic/Service之间的通信，同时还提供一个参数服务器，可以在运行时提供一些参数。ROS Master示意图如图所示：<img src="https://raw.githubusercontent.com/mastercaiOSS/OSS/master/blog/2021/07-14-vORlbc.png" style="zoom:50%;"></p><h3 id="文件系统"><a href="#文件系统" class="headerlink" title="文件系统"></a>文件系统</h3><p>ROS的工作空间一般为～/catkin_ws（自行创建），一般包括build, devel, install, src和param.yaml文件。build 文件夹下主要存放编译过程中的中间文件，和普通cmake编译中的build文件夹功能类似；devel文件夹中存放有编译出来的可执行文件以及对应几大主流shell系统的环境变量更新命令。install文件夹下主要存放用于install的命令脚本，src存放所有功能包，param.yaml中配置ROS系统的参数，ROS系统启动时将读取这个文件。<img src="https://raw.githubusercontent.com/mastercaiOSS/OSS/master/blog/2021/07-14-RGA9qm.png" alt></p><p>源代码就放在catkin_ws/src目录下。src目录下每个文件夹都是一个功能包（使用命令创建功能包），每个功能包里一般包括源代码（src和script），Package manifest，消息/服务定义文件，如图所示：<img src="https://raw.githubusercontent.com/mastercaiOSS/OSS/master/blog/2021/07-14-udk2x0.png" alt></p><p>多个功能包又可以组成一个元功能包，最终构成一个完整的ROS 系统。</p><h2 id="基础命令"><a href="#基础命令" class="headerlink" title="基础命令"></a>基础命令</h2><h3 id="创建workspace"><a href="#创建workspace" class="headerlink" title="创建workspace"></a>创建workspace</h3><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">mkdir</span> -p ~/catkin_ws/src<span class="token function">cd</span> ~/catkin_ws/src<span class="token comment" spellcheck="true"># 初始化工作空间</span>catkin_init_workspace<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>ROS的程序编译使用catkin编译系统，每次都会编译整个workspace，编译命令为<code>catkin_make</code>，编译需要在workspace根目录执行。</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">cd</span> ~/catkin_ws/catkin_make<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>编译完成之后，要想使用刚刚编译成功的package，需要对bash的环境进行更新，执行命令：</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">source</span> devel/setup.bash<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="创建功能包"><a href="#创建功能包" class="headerlink" title="创建功能包"></a>创建功能包</h3><p>功能包一般都放在catkin_ws/src目录下，使用catkin_create_pkg 命令进行创建。</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">cd</span> ~/catkin_ws/srccatkin_create_pkg test_pkg std_msgs rospy roscpp<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>catkin_create_pkg 命令格式为：<code>catkin_create_pkg &lt;package名称&gt; [功能包所需依赖..]</code></p><p>需要注意，同一工作空间下，不允许存在同名的功能包。</p><h3 id="其他常用命令"><a href="#其他常用命令" class="headerlink" title="其他常用命令"></a>其他常用命令</h3><ol><li><code>roscore</code></li></ol><p>启动ROS Master</p><ol start="2"><li><code>rostopic</code></li></ol><p><img src="https://raw.githubusercontent.com/mastercaiOSS/OSS/master/blog/2021/07-14-vydWSz.png" alt></p><p>rostopic 命令可跟不同参数，最常用命令为<code>rostopic list</code>，用于查看当前ROS Master中存在的所有topic；<code>rostopic pub</code>可以向指定的topic中发布数据，例如向turtlesim中发布数据改变turtle的位置，在发布数据时，当确定需要发布的topic后，可以双击“tab”键自动补全消息格式：</p><img src="https://raw.githubusercontent.com/mastercaiOSS/OSS/master/blog/2021/07-14-QnfypQ.png" style="zoom:80%;"><ol start="3"><li><code>rosservice</code></li></ol><p>和rostopic命令类似，可以用于操作service相关的内容。</p><p><img src="https://raw.githubusercontent.com/mastercaiOSS/OSS/master/blog/2021/07-14-cYgHri.png" alt></p><p>其中，<code>rosservice list</code>用于查看当前ROS Master中所有service的名称；<code>rosservice call</code>可以调用某个特定的service，如图所示：<img src="https://raw.githubusercontent.com/mastercaiOSS/OSS/master/blog/2021/07-14-6mOFnJ.png" style="zoom:67%;"></p><p>图中命令调用 /spawn服务，产生了一个新的turtle。</p><ol start="4"><li><code>rosnode</code></li></ol><p><img src="https://raw.githubusercontent.com/mastercaiOSS/OSS/master/blog/2021/07-14-BEVJVu.png" alt></p><p>主要使用<code>rosnode list</code>命令查看当然ROS Master中存在的所有node。</p><ol start="5"><li><code>rosparam</code></li></ol><p><img src="https://raw.githubusercontent.com/mastercaiOSS/OSS/master/blog/2021/07-14-JdlIMX.png" alt></p><p>rosparam命令主要用于对ROS Master中的参数进行各种操作</p><ol start="6"><li><code>rosmsg</code>和<code>rossrv</code></li></ol><p>rosmsg和rossrv主要用于显示ROS Master中所有消息类型，同时可以查看某个消息的具体结构。</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;ROS入门之核心概念和系统安装&quot;&gt;&lt;a href=&quot;#ROS入门之核心概念和系统安装&quot; class=&quot;headerlink&quot; title=&quot;ROS入门之核心概念和系统安装&quot;&gt;&lt;/a&gt;ROS入门之核心概念和系统安装&lt;/h1&gt;&lt;h2 id=&quot;ROS简介&quot;&gt;&lt;a hre
      
    
    </summary>
    
    
      <category term="ROS" scheme="http://blog.master-cai.xyz/categories/ROS/"/>
    
    
      <category term="ROS" scheme="http://blog.master-cai.xyz/tags/ROS/"/>
    
  </entry>
  
  <entry>
    <title>C++ socket编程小结</title>
    <link href="http://blog.master-cai.xyz/posts/49595.html"/>
    <id>http://blog.master-cai.xyz/posts/49595.html</id>
    <published>2020-12-19T10:23:12.000Z</published>
    <updated>2020-12-20T04:53:14.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="C-socket编程小结"><a href="#C-socket编程小结" class="headerlink" title="C++ socket编程小结"></a>C++ socket编程小结</h1><p>#随手笔记<br>    最近做毕设的时候涉及到了这方面的知识，也是经过多次遇坑，趁着还有印象记录一下。本篇主要涉及Linux/unix（MAC OS）下的socket编程，win环境下的socket略有不同。</p><h2 id="socket简介"><a href="#socket简介" class="headerlink" title="socket简介"></a>socket简介</h2><p>socket英文直译为“插座，插孔”，可能意思是网络编程就是一个封闭的系统上和外部交互的那个“插孔”吧。但是中文翻译为套接字，感觉不是非常好理解，初学的时候甚至因此产生了一些误解。简而言之，socket就是进程之间进行通信的一种约定，或者说是在程序中对TCP和UDP协议的一种封装。</p><h2 id="一个最简单的socket示例"><a href="#一个最简单的socket示例" class="headerlink" title="一个最简单的socket示例"></a>一个最简单的socket示例</h2><p>先看完整代码：</p><ul><li>发送端sender.cpp:<pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;string.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;unistd.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;arpa/inet.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;sys/socket.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;netinet/in.h></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">int</span> serv_sock <span class="token operator">=</span> <span class="token function">socket</span><span class="token punctuation">(</span>AF_INET<span class="token punctuation">,</span> SOCK_STREAM<span class="token punctuation">,</span> IPPROTO_TCP<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">struct</span> sockaddr_in serv_addr<span class="token punctuation">;</span>  <span class="token function">memset</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>serv_addr<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>serv_addr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  serv_addr<span class="token punctuation">.</span>sin_family <span class="token operator">=</span> AF_INET<span class="token punctuation">;</span>  serv_addr<span class="token punctuation">.</span>sin_addr<span class="token punctuation">.</span>s_addr <span class="token operator">=</span> <span class="token function">inet_addr</span><span class="token punctuation">(</span><span class="token string">"127.0.0.1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  serv_addr<span class="token punctuation">.</span>sin_port <span class="token operator">=</span> <span class="token function">htons</span><span class="token punctuation">(</span><span class="token number">1234</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">bind</span><span class="token punctuation">(</span>serv_sock<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">struct</span> sockaddr<span class="token operator">*</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>serv_addr<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>serv_addr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">listen</span><span class="token punctuation">(</span>serv_sock<span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">struct</span> sockaddr_in clnt_addr<span class="token punctuation">;</span>  socklen_t clnt_addr_size <span class="token operator">=</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>clnt_addr<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">int</span> clnt_sock <span class="token operator">=</span> <span class="token function">accept</span><span class="token punctuation">(</span>serv_sock<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">struct</span> sockaddr<span class="token operator">*</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>clnt_addr<span class="token punctuation">,</span> <span class="token operator">&amp;</span>clnt_addr_size<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">char</span> str<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"hello World!"</span><span class="token punctuation">;</span>  <span class="token function">send</span><span class="token punctuation">(</span>clnt_sock<span class="token punctuation">,</span> str<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">close</span><span class="token punctuation">(</span>clnt_sock<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">close</span><span class="token punctuation">(</span>serv_sock<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><p><code>int serv_sock = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);</code><br>    首先通过socket函数定义了一个本地的socket：serv_sock。由于在Linux系统中万物皆文件，socket也不例外，socket函数返回值就是创建好的socket的文件描述符，是一个整数。后面我们就通过这个文件描述符来操作serv _sock这个socket。<br>    然后看socket函数的参数：AF_INET表示使用ipv4地址；SOCK _STREAM表示使用面向连接的数据传输方式；IPPROTO _TCP表示使用TCP协议。同理对于UDP协议也有相应的参数。<br>    但是现在我们只有一个socket，并不知道他的地址，端口号，也就没法和外间进行连接。在C++中专门有一个数据结构来存储socket的各个属性值，看如下代码段：</p><pre class="line-numbers language-cpp"><code class="language-cpp">    <span class="token keyword">struct</span> sockaddr_in serv_addr<span class="token punctuation">;</span>    <span class="token function">memset</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>serv_addr<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>serv_addr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    serv_addr<span class="token punctuation">.</span>sin_family <span class="token operator">=</span> AF_INET<span class="token punctuation">;</span>    serv_addr<span class="token punctuation">.</span>sin_addr<span class="token punctuation">.</span>s_addr <span class="token operator">=</span> <span class="token function">inet_addr</span><span class="token punctuation">(</span><span class="token string">"127.0.0.1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    serv_addr<span class="token punctuation">.</span>sin_port <span class="token operator">=</span> <span class="token function">htons</span><span class="token punctuation">(</span><span class="token number">1234</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>sockaddr_ in 便是这个数据结构，其中定义了socket使用的协议，地址和端口号。<br>    单独定义这些也不够，这只是一条数据，需要和一个特定的socket绑定起来才能构成一个完整的socket。在C++中使用bind()函数进行绑定操作。<br><code>bind(serv_sock,(struct sockaddr*)&amp;serv_addr,sizeof(serv_addr));</code><br>    到这就构成了一个完整的socket。然后使用listen()函数使其进入监听状态，就可以被别的socket连接了。<code>listen(serv_sock, 20);</code>第一个参数指定了哪个socket进入监听状态；第二个参数设定了socket连接请求队列的长度。但是listen函数并不是真正的和某个socket进行了连接，它只是将socket的状态进行了转变。<br>    socket()函数创建的socket默认处于“主动连接”状态，并不会接收别的socket的连接请求。为了能够接收别的进程发来的请求，就需要单独指定一下这个socket的状态，即listen()函数的功能。<br>    然后我们要接受其他进程的连接请求，我们需要创建一个socket作为这个链接的载体。就好比是你在网络中设置了一块共享硬盘，然后将其映射到本地的过程。这个新创建的socket就是你给这个网络硬盘分配的盘号（文件名，挂载点），发起网络连接的进程就相当于网络硬盘。接下来执行真正的连接操作。</p><pre class="line-numbers language-cpp"><code class="language-cpp">    <span class="token keyword">struct</span> sockaddr_in clnt_addr<span class="token punctuation">;</span>    socklen_t clnt_addr_size <span class="token operator">=</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>clnt_addr<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> clnt_sock <span class="token operator">=</span> <span class="token function">accept</span><span class="token punctuation">(</span>serv_sock<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">struct</span> sockaddr<span class="token operator">*</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>clnt_addr<span class="token punctuation">,</span> <span class="token operator">&amp;</span>clnt_addr_size<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>首先是定义一个地址结构，用于接收发起请求的socket的属性信息。然后通过accept函数接收实际的请求，返回值是接收到的“socket”的文件描述符。accept()函数第一个参数是接收连接请求的socket的文件描述符，即要将请求连接到哪个socket上。需要注意的是 <strong>程序一旦运行到accpet()函数，就会进入阻塞状态</strong> ， 直到处理了一个连接请求程序才会继续。</p><pre class="line-numbers language-cpp"><code class="language-cpp">    <span class="token keyword">char</span> str<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"hello World!"</span><span class="token punctuation">;</span>    <span class="token function">send</span><span class="token punctuation">(</span>clnt_sock<span class="token punctuation">,</span> str<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">close</span><span class="token punctuation">(</span>clnt_sock<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">close</span><span class="token punctuation">(</span>serv_sock<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>建立连接之后，通过send()函数发送消息即可。第一个参数为目的socket的文件描述符；第二个参数为要发送的消息，即消息存放的地址；第三个参数为要发送的数据的大小；第四个参数为flag，用于设置一些特殊的操作，一般设置为0；返回值为实际发送的数据的大小，如果发送失败返回-1。<br>    需要注意的是，send()函数只是把要发送的数据存放到发送缓冲区，最终的发送是由协议完成的。因此如果数据过大就可能存在一次发送不完的情况，需要单独处理一下。<br>    最后，使用close()函数将socket关闭即可。</p><ul><li>接收端receiver.cpp<pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;string.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;unistd.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;arpa/inet.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;sys/socket.h></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">int</span> sock <span class="token operator">=</span> <span class="token function">socket</span><span class="token punctuation">(</span>AF_INET<span class="token punctuation">,</span> SOCK_STREAM<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">struct</span> sockaddr_in serv_addr<span class="token punctuation">;</span>  <span class="token function">memset</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>serv_addr<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>serv_addr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  serv_addr<span class="token punctuation">.</span>sin_family <span class="token operator">=</span> AF_INET<span class="token punctuation">;</span>   serv_addr<span class="token punctuation">.</span>sin_addr<span class="token punctuation">.</span>s_addr <span class="token operator">=</span> <span class="token function">inet_addr</span><span class="token punctuation">(</span><span class="token string">"127.0.0.1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   serv_addr<span class="token punctuation">.</span>sin_port <span class="token operator">=</span> <span class="token function">htons</span><span class="token punctuation">(</span><span class="token number">1234</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token function">connect</span><span class="token punctuation">(</span>sock<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">struct</span> sockaddr<span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>serv_addr<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>serv_addr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">char</span> buffer<span class="token punctuation">[</span><span class="token number">40</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token function">recv</span><span class="token punctuation">(</span>sock<span class="token punctuation">,</span> buffer<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>buffer<span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Message form server: %s\n"</span><span class="token punctuation">,</span> buffer<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">close</span><span class="token punctuation">(</span>sock<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><p>接收端和发送端比较类似，这里就挑不同的地方来说。<br>    首先是接收端作为发起连接的一方，不需要设置listen()函数，socket默认就是主动连接状态。在确定了要连接的socket的ip和端口号之后，通过connect()进行连接即可。这里不需要为socket绑定一个端口号，因为用户并不会关心哪个端口和服务器建立了连接，系统会自动进行分配，只需要知道目的地址和端口就可以达到连接的目的。简单来说就是如果需要在连接建立之前，知道具体的端口号的话就需要使用bind()函数确定一下。如果一定要指定一个端口号也是可以的。<br>    如果要读取消息，使用recv()函数即可。当然在Linux系统中，socket既然作为文件，当然也可以使用write/read函数了。当然这里由于协议的现实，如果数据过大可能不能一次性接收完全，就需要单独处理。</p><h2 id="几个小坑"><a href="#几个小坑" class="headerlink" title="几个小坑"></a>几个小坑</h2><ol><li> 最开始在做的时候，为了测试send函数的发送机制，尝试了连续两次send消息“hello world”然后使用一个recv接收，但是一直只能收到一个，误以为一个recv只能接收一个send发出的消息。但是这个结论和网上所有对于socket的讲解都不符合，也和我自己对网络协议的认知不符合，最后多次调试才发现原来是c++字符串中的结束字符的原因。recv实际上是收到了两个send发出的消息，但是在printf的时候，遇到了\0’就自动停止了，后面的消息没有被打印出来。所以在发送字符串的时候只需要发送实际的字符数据即可，不需要发送’\0’。<br> Server端连续发送两次“hello” receiver接收一次只能显示一个“hello”原因：<br>Server每次发送的number为6 即包含了结束字符，实际上receiver接收到了两次“hello”，但是后一次因为第一个“hello”的结束字符而无法被解析出来。</li><li>接着上一个问题，我之所以会发出带有结束符的字符串消息，是因为我在确定消息长度的时候使用了sizeof()函数。但是这个函数实际上返回的是你开辟的空间的大小，不管你是否填充了实际的内容；对于字符串，想要得到实际的字符串长度，需要使用strlen()函数。具体的两个函数的效果演示如果。</li></ol><img src="/Users/mastercai/Desktop/blog/source/_posts/C-socket编程小结/67EA50FB-C013-4E70-91CE-428FDA01C44E.png" alt="67EA50FB-C013-4E70-91CE-428FDA01C44E" style="zoom: 67%;"><ol start="3"><li>对于发送/接收不完全的数据，需要特别的处理，这里给出两个比较通用的函数实现。</li></ol><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">int</span> <span class="token function">RecvAll</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">&amp;</span>sock<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">char</span> <span class="token operator">*</span>image_recv_data<span class="token punctuation">,</span> <span class="token keyword">int</span> image_len<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">int</span> recv_image_num<span class="token punctuation">;</span>  <span class="token keyword">int</span> remain_size <span class="token operator">=</span> image_len<span class="token punctuation">;</span>  <span class="token keyword">int</span> point <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token keyword">unsigned</span> <span class="token keyword">char</span> image_recv_buff<span class="token punctuation">[</span>image_len<span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//分段接收</span>  <span class="token keyword">while</span> <span class="token punctuation">(</span>remain_size <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    recv_image_num <span class="token operator">=</span> <span class="token function">recv</span><span class="token punctuation">(</span>sock<span class="token punctuation">,</span> image_recv_buff<span class="token punctuation">,</span> remain_size<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> recv_image_num<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>      image_recv_data<span class="token punctuation">[</span>point <span class="token operator">+</span> i<span class="token punctuation">]</span> <span class="token operator">=</span> image_recv_buff<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    remain_size <span class="token operator">=</span> remain_size <span class="token operator">-</span> recv_image_num<span class="token punctuation">;</span>    point <span class="token operator">+</span><span class="token operator">=</span> recv_image_num<span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"recv %d bytes data, remain %d bytes data\n"</span><span class="token punctuation">,</span> recv_image_num<span class="token punctuation">,</span>           remain_size<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> point<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">SendAll</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">&amp;</span>sock<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">char</span> <span class="token operator">*</span>data_sent<span class="token punctuation">,</span> <span class="token keyword">int</span> data_len<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">int</span> sent_data_num<span class="token punctuation">;</span>  <span class="token keyword">int</span> remain_size <span class="token operator">=</span> data_len<span class="token punctuation">;</span>  <span class="token keyword">int</span> point <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token keyword">while</span> <span class="token punctuation">(</span>remain_size <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    sent_data_num <span class="token operator">=</span> <span class="token function">send</span><span class="token punctuation">(</span>sock<span class="token punctuation">,</span> data_sent<span class="token punctuation">,</span> data_len<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    remain_size <span class="token operator">=</span> remain_size <span class="token operator">-</span> sent_data_num<span class="token punctuation">;</span>    point <span class="token operator">+</span><span class="token operator">=</span> sent_data_num<span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"recv %d bytes data, remain %d bytes data\n"</span><span class="token punctuation">,</span> sent_data_num<span class="token punctuation">,</span>           remain_size<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> point<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;C-socket编程小结&quot;&gt;&lt;a href=&quot;#C-socket编程小结&quot; class=&quot;headerlink&quot; title=&quot;C++ socket编程小结&quot;&gt;&lt;/a&gt;C++ socket编程小结&lt;/h1&gt;&lt;p&gt;#随手笔记&lt;br&gt;    最近做毕设的时候涉及到了这
      
    
    </summary>
    
    
      <category term="C++" scheme="http://blog.master-cai.xyz/categories/C/"/>
    
    
      <category term="C++" scheme="http://blog.master-cai.xyz/tags/C/"/>
    
      <category term="socket" scheme="http://blog.master-cai.xyz/tags/socket/"/>
    
  </entry>
  
  <entry>
    <title>1010 Radix</title>
    <link href="http://blog.master-cai.xyz/posts/7481.html"/>
    <id>http://blog.master-cai.xyz/posts/7481.html</id>
    <published>2020-05-23T10:05:57.000Z</published>
    <updated>2020-05-23T11:13:00.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1010-Radix"><a href="#1010-Radix" class="headerlink" title="1010 Radix"></a>1010 Radix</h1><h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>Given a pair of positive integers, for example, 6 and 110, can this equation 6 = 110 be true? The answer is <code>yes</code>, if 6 is a decimal number and 110 is a binary number.</p><p>Now for any pair of positive integers <em>N</em>1 and <em>N</em>2, your task is to find the radix of one number while that of the other is given.</p><h3 id="Input-Specification"><a href="#Input-Specification" class="headerlink" title="Input Specification:"></a>Input Specification:</h3><p>Each input file contains one test case. Each case occupies a line which contains 4 positive integers:</p><pre><code>N1 N2 tag radix</code></pre><p>Here <code>N1</code> and <code>N2</code> each has no more than 10 digits. A digit is less than its radix and is chosen from the set { 0-9, <code>a</code>-<code>z</code> } where 0-9 represent the decimal numbers 0-9, and <code>a</code>-<code>z</code> represent the decimal numbers 10-35. The last number <code>radix</code> is the radix of <code>N1</code> if <code>tag</code> is 1, or of <code>N2</code> if <code>tag</code> is 2.</p><h3 id="Output-Specification"><a href="#Output-Specification" class="headerlink" title="Output Specification:"></a>Output Specification:</h3><p>For each test case, print in one line the radix of the other number so that the equation <code>N1</code> = <code>N2</code> is true. If the equation is impossible, print <code>Impossible</code>. If the solution is not unique, output the smallest possible radix.</p><h3 id="Sample-Input-1"><a href="#Sample-Input-1" class="headerlink" title="Sample Input 1:"></a>Sample Input 1:</h3><pre class="line-numbers language-in"><code class="language-in">6 110 1 10<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="Sample-Output-1"><a href="#Sample-Output-1" class="headerlink" title="Sample Output 1:"></a>Sample Output 1:</h3><pre class="line-numbers language-out"><code class="language-out">2<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="Sample-Input-2"><a href="#Sample-Input-2" class="headerlink" title="Sample Input 2:"></a>Sample Input 2:</h3><pre class="line-numbers language-in"><code class="language-in">1 ab 1 2<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="Sample-Output-2"><a href="#Sample-Output-2" class="headerlink" title="Sample Output 2:"></a>Sample Output 2:</h3><pre class="line-numbers language-out"><code class="language-out">Impossible<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><p>本题大体上的思路比较简单，就是使用二分查找的思想，找到合适的那个radix。但是细节上的东西非常多。首先一个坑的点就是题目中没有给出radix等数据的范围，必须要使用long long类型才行，其转化过程中还可能产生溢出。下面结合代码分析</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;cctype></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;algorithm></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;cmath></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">long</span> <span class="token keyword">long</span> <span class="token function">convert</span><span class="token punctuation">(</span>string n<span class="token punctuation">,</span> <span class="token keyword">long</span> <span class="token keyword">long</span> radix<span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token comment" spellcheck="true">//进制转换 radix进制转为10</span>    <span class="token keyword">long</span> <span class="token keyword">long</span> sum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> index <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> tmp <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">auto</span> it<span class="token operator">=</span>n<span class="token punctuation">.</span><span class="token function">rbegin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> it <span class="token operator">!=</span> n<span class="token punctuation">.</span><span class="token function">rend</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> it<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        tmp <span class="token operator">=</span> <span class="token function">isdigit</span><span class="token punctuation">(</span><span class="token operator">*</span>it<span class="token punctuation">)</span><span class="token operator">?</span><span class="token operator">*</span>it<span class="token operator">-</span><span class="token string">'0'</span><span class="token operator">:</span><span class="token operator">*</span>it<span class="token operator">-</span><span class="token string">'a'</span><span class="token operator">+</span><span class="token number">10</span><span class="token punctuation">;</span>        sum <span class="token operator">+</span><span class="token operator">=</span> tmp <span class="token operator">*</span> <span class="token function">pow</span><span class="token punctuation">(</span>radix<span class="token punctuation">,</span> index<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> sum<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 二分法 寻找合适的radix n是待确定的数字 num是确定进制的数字</span><span class="token keyword">long</span> <span class="token keyword">long</span> <span class="token function">find_radix</span><span class="token punctuation">(</span>string n<span class="token punctuation">,</span> <span class="token keyword">long</span> <span class="token keyword">long</span> num<span class="token punctuation">)</span><span class="token punctuation">{</span>     <span class="token keyword">char</span> it <span class="token operator">=</span> <span class="token operator">*</span><span class="token function">max_element</span><span class="token punctuation">(</span>n<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> n<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// stl库 寻找最大的元素</span>    <span class="token comment" spellcheck="true">// 这里使用 max_element用作下限 是因为一个数中不会出现比进制更大的digit</span>    <span class="token keyword">long</span> <span class="token keyword">long</span> low <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token function">isdigit</span><span class="token punctuation">(</span>it<span class="token punctuation">)</span><span class="token operator">?</span>it<span class="token operator">-</span><span class="token string">'0'</span><span class="token operator">:</span>it<span class="token operator">-</span><span class="token string">'a'</span><span class="token operator">+</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 将digit转化为数值</span>    <span class="token keyword">long</span> <span class="token keyword">long</span> high <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>num<span class="token punctuation">,</span> low<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//用两者中较大的一个作上限</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>low <span class="token operator">&lt;=</span> high<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">long</span> <span class="token keyword">long</span> mid <span class="token operator">=</span> <span class="token punctuation">(</span>low<span class="token operator">+</span>high<span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">;</span>        <span class="token keyword">long</span> <span class="token keyword">long</span> t <span class="token operator">=</span> <span class="token function">convert</span><span class="token punctuation">(</span>n<span class="token punctuation">,</span> mid<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 根据mid进制转换的结果</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>t <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token operator">||</span> t<span class="token operator">></span>num<span class="token punctuation">)</span><span class="token punctuation">{</span>            high <span class="token operator">=</span> mid <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>t <span class="token operator">==</span> num<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">return</span> mid<span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span><span class="token punctuation">{</span>            low <span class="token operator">=</span> mid <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    string n1<span class="token punctuation">,</span> n2<span class="token punctuation">;</span>    <span class="token keyword">long</span> <span class="token keyword">long</span> tag<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span> radix<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span> result_radix<span class="token punctuation">;</span>    cin <span class="token operator">>></span> n1 <span class="token operator">>></span> n2 <span class="token operator">>></span> tag <span class="token operator">>></span> radix<span class="token punctuation">;</span>    result_radix <span class="token operator">=</span> tag<span class="token operator">==</span><span class="token number">1</span> <span class="token operator">?</span> <span class="token function">find_radix</span><span class="token punctuation">(</span>n2<span class="token punctuation">,</span> <span class="token function">convert</span><span class="token punctuation">(</span>n1<span class="token punctuation">,</span> radix<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token function">find_radix</span><span class="token punctuation">(</span>n1<span class="token punctuation">,</span> <span class="token function">convert</span><span class="token punctuation">(</span>n2<span class="token punctuation">,</span> radix<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>result_radix <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%lld"</span><span class="token punctuation">,</span> result_radix<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span><span class="token punctuation">{</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Impossible"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;1010-Radix&quot;&gt;&lt;a href=&quot;#1010-Radix&quot; class=&quot;headerlink&quot; title=&quot;1010 Radix&quot;&gt;&lt;/a&gt;1010 Radix&lt;/h1&gt;&lt;h2 id=&quot;题目&quot;&gt;&lt;a href=&quot;#题目&quot; class=&quot;headerli
      
    
    </summary>
    
    
      <category term="pat" scheme="http://blog.master-cai.xyz/categories/pat/"/>
    
    
      <category term="pat" scheme="http://blog.master-cai.xyz/tags/pat/"/>
    
      <category term="进制转换" scheme="http://blog.master-cai.xyz/tags/%E8%BF%9B%E5%88%B6%E8%BD%AC%E6%8D%A2/"/>
    
      <category term="二分" scheme="http://blog.master-cai.xyz/tags/%E4%BA%8C%E5%88%86/"/>
    
  </entry>
  
  <entry>
    <title>1085_Perfect_Sequence</title>
    <link href="http://blog.master-cai.xyz/posts/39771.html"/>
    <id>http://blog.master-cai.xyz/posts/39771.html</id>
    <published>2020-05-23T02:48:00.000Z</published>
    <updated>2020-05-23T11:13:00.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1085-Perfect-Sequence"><a href="#1085-Perfect-Sequence" class="headerlink" title="1085 Perfect Sequence"></a>1085 Perfect Sequence</h1><h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>Given a sequence of positive integers and another positive integer <em>p</em>. The sequence is said to be a <strong>perfect sequence</strong> if <em>M</em>≤<em>m</em>×<em>p</em> where <em>M</em> and <em>m</em> are the maximum and minimum numbers in the sequence, respectively.</p><p>Now given a sequence and a parameter <em>p</em>, you are supposed to find from the sequence as many numbers as possible to form a perfect subsequence.</p><h3 id="Input-Specification"><a href="#Input-Specification" class="headerlink" title="Input Specification:"></a>Input Specification:</h3><p>Each input file contains one test case. For each case, the first line contains two positive integers <em>N</em> and <em>p</em>, where <em>N</em> (≤105) is the number of integers in the sequence, and <em>p</em> (≤109) is the parameter. In the second line there are <em>N</em> positive integers, each is no greater than 109.</p><h3 id="Output-Specification"><a href="#Output-Specification" class="headerlink" title="Output Specification:"></a>Output Specification:</h3><p>For each test case, print in one line the maximum number of integers that can be chosen to form a perfect subsequence.</p><h3 id="Sample-Input"><a href="#Sample-Input" class="headerlink" title="Sample Input:"></a>Sample Input:</h3><pre class="line-numbers language-in"><code class="language-in">10 82 3 20 4 5 1 6 7 8 9<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="Sample-Output"><a href="#Sample-Output" class="headerlink" title="Sample Output:"></a>Sample Output:</h3><pre class="line-numbers language-out"><code class="language-out">8<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><p>本题要求的是一个序列，因此就是从这N个数中选择若干个就可以了（不是子串）。看题目条件，要求选出的数中的最大值不超过最小值的p倍。为了方便处理，我们可以先将序列进行排序，这样问题就转化成了求一个子串的问题了。对于这种的问题，最常见的做法就是双指针。设置两个指针作为区间的左右端点，然后根据条件进行滑动，最终取最大值即可。但是本题还有一种做法，对于有序序列而言，求一个特定条件的数字，用二分查找无疑是最快的方法。因此，本题一共有两（三）种解法，下面直接看代码。</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><ol><li><p>二分</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;vector></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;algorithm></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;climits></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> a<span class="token punctuation">;</span><span class="token keyword">int</span> N<span class="token punctuation">,</span> p<span class="token punctuation">;</span><span class="token keyword">bool</span> <span class="token function">binsearh</span><span class="token punctuation">(</span><span class="token keyword">int</span> pos<span class="token punctuation">,</span> <span class="token keyword">long</span> <span class="token keyword">long</span> bound<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span>N<span class="token number">-1</span><span class="token punctuation">]</span> <span class="token operator">&lt;=</span> bound<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> N<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">int</span> l <span class="token operator">=</span> pos<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span> r <span class="token operator">=</span> N<span class="token number">-1</span><span class="token punctuation">,</span> mid<span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>l<span class="token operator">&lt;</span>r<span class="token punctuation">)</span><span class="token punctuation">{</span>        mid <span class="token operator">=</span> <span class="token punctuation">(</span>l<span class="token operator">+</span>r<span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span>mid<span class="token punctuation">]</span><span class="token operator">&lt;=</span>bound<span class="token punctuation">)</span><span class="token punctuation">{</span>            l <span class="token operator">=</span> mid<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span><span class="token punctuation">{</span>            r <span class="token operator">=</span> mid<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> l<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d %d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>N<span class="token punctuation">,</span> <span class="token operator">&amp;</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span>    a<span class="token punctuation">.</span><span class="token function">resize</span><span class="token punctuation">(</span>N<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> M<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span> m<span class="token operator">=</span>INT_MAX<span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> N<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token comment" spellcheck="true">//    int i=0, j=0;</span>    <span class="token keyword">int</span> ans <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token function">sort</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> a<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> N<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> x <span class="token operator">=</span> <span class="token function">binsearch</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">long</span> <span class="token keyword">long</span><span class="token punctuation">)</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">*</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span>        ans <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>ans<span class="token punctuation">,</span> x<span class="token operator">-</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> ans<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><ol start="2"><li><p>std::upper_bound</p><p>这里先补充一下，std库中有两个三个二分搜索的实现，其中upper_bound和lower_bound用法比较相似：</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token comment" spellcheck="true">// 在a.begin()到a.end()范围内，搜索第一个大于bound的元素，返回其迭代器</span><span class="token function">upper_bound</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> a<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> bound<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 在a.begin()到a.end()范围内，搜索第一个大于等于bound的元素，返回其迭代器</span><span class="token function">lower_bound</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> a<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> bound<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>目前来看，这两个函数的唯一区别就是是否可以等于。下面看代码：</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token comment" spellcheck="true">//</span><span class="token comment" spellcheck="true">// Created by masterCai on 2020/5/23.</span><span class="token comment" spellcheck="true">//</span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;vector></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;algorithm></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> n<span class="token punctuation">,</span> p<span class="token punctuation">;</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d %d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>n<span class="token punctuation">,</span> <span class="token operator">&amp;</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span>    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">a</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">sort</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> a<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> ans <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> x <span class="token operator">=</span> <span class="token function">upper_bound</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> a<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">long</span> <span class="token keyword">long</span><span class="token punctuation">)</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">*</span>p<span class="token punctuation">)</span><span class="token operator">-</span>a<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ans <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>ans<span class="token punctuation">,</span> x<span class="token operator">-</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> ans<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>双指针</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token comment" spellcheck="true">//</span><span class="token comment" spellcheck="true">// Created by masterCai on 2020/5/23.</span><span class="token comment" spellcheck="true">//</span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;vector></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;algorithm></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> n<span class="token punctuation">,</span> p<span class="token punctuation">;</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d %d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>n<span class="token punctuation">,</span> <span class="token operator">&amp;</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span>    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">a</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">sort</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> a<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span> j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> ans <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>i<span class="token operator">&lt;=</span>j <span class="token operator">&amp;&amp;</span> j<span class="token operator">&lt;</span>n<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">long</span> <span class="token keyword">long</span><span class="token punctuation">)</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">*</span>p<span class="token operator">>=</span>a<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            j<span class="token operator">+</span><span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span><span class="token punctuation">{</span>            i <span class="token operator">+</span><span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        ans <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>ans<span class="token punctuation">,</span> j<span class="token operator">-</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> ans<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;1085-Perfect-Sequence&quot;&gt;&lt;a href=&quot;#1085-Perfect-Sequence&quot; class=&quot;headerlink&quot; title=&quot;1085 Perfect Sequence&quot;&gt;&lt;/a&gt;1085 Perfect Sequence&lt;/
      
    
    </summary>
    
    
      <category term="pat" scheme="http://blog.master-cai.xyz/categories/pat/"/>
    
    
      <category term="pat" scheme="http://blog.master-cai.xyz/tags/pat/"/>
    
      <category term="二分" scheme="http://blog.master-cai.xyz/tags/%E4%BA%8C%E5%88%86/"/>
    
      <category term="双指针" scheme="http://blog.master-cai.xyz/tags/%E5%8F%8C%E6%8C%87%E9%92%88/"/>
    
  </entry>
  
  <entry>
    <title>1038 Recover the Smallest Number</title>
    <link href="http://blog.master-cai.xyz/posts/62891.html"/>
    <id>http://blog.master-cai.xyz/posts/62891.html</id>
    <published>2020-05-22T23:57:22.000Z</published>
    <updated>2020-05-23T11:13:00.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1038-Recover-the-Smallest-Number"><a href="#1038-Recover-the-Smallest-Number" class="headerlink" title="1038 Recover the Smallest Number"></a>1038 Recover the Smallest Number</h1><h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>Given a collection of number segments, you are supposed to recover the smallest number from them. For example, given { 32, 321, 3214, 0229, 87 }, we can recover many numbers such like 32-321-3214-0229-87 or 0229-32-87-321-3214 with respect to different orders of combinations of these segments, and the smallest number is 0229-321-3214-32-87.</p><h3 id="Input-Specification"><a href="#Input-Specification" class="headerlink" title="Input Specification:"></a>Input Specification:</h3><p>Each input file contains one test case. Each case gives a positive integer <em>N</em> (≤104) followed by <em>N</em> number segments. Each segment contains a non-negative integer of no more than 8 digits. All the numbers in a line are separated by a space.</p><h3 id="Output-Specification"><a href="#Output-Specification" class="headerlink" title="Output Specification:"></a>Output Specification:</h3><p>For each test case, print the smallest number in one line. Notice that the first digit must not be zero.</p><h3 id="Sample-Input"><a href="#Sample-Input" class="headerlink" title="Sample Input:"></a>Sample Input:</h3><pre class="line-numbers language-in"><code class="language-in">5 32 321 3214 0229 87<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="Sample-Output"><a href="#Sample-Output" class="headerlink" title="Sample Output:"></a>Sample Output:</h3><pre class="line-numbers language-out"><code class="language-out">22932132143287<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><p>本题如果能够想到正确的贪心算法就很简单，不然就不容易做对。一开始是先将所有数据用int读入自动去0，然后发现这样会去掉很多不应该去掉的0，比如<code>1 10 -&gt; 101</code>这样的情况。然后就直接按照string读入，在cmp的时候，按照每一位的大小来排序，位数不够则循环补上。但是还有测试点无法通过，最后查看题解，方法非常巧妙，直接用a+b和b+a进行比较，仔细一想好像就是我的cmp函数的简化表达版。。我以为我到了第三层，结果题解在第五层。代码也很简单，直接贴一下好了。</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token comment" spellcheck="true">//</span><span class="token comment" spellcheck="true">// Created by masterCai on 2020/5/22.</span><span class="token comment" spellcheck="true">//</span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;vector></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;algorithm></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;string></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//bool cmp(string &amp;a, string &amp;b){</span><span class="token comment" spellcheck="true">//    int s1=a.size(), s2=b.size();</span><span class="token comment" spellcheck="true">//    int pos = 0;</span><span class="token comment" spellcheck="true">//    for (pos = 0; pos &lt; s1 &amp;&amp; pos &lt; s2; ++pos) {</span><span class="token comment" spellcheck="true">//        if (a[pos] != b[pos]){</span><span class="token comment" spellcheck="true">//            return a[pos] &lt; b[pos];</span><span class="token comment" spellcheck="true">//        }</span><span class="token comment" spellcheck="true">//    }</span><span class="token comment" spellcheck="true">//    if(pos &lt; s1){</span><span class="token comment" spellcheck="true">//        int i = 0;</span><span class="token comment" spellcheck="true">//        while (i&lt;s2 &amp;&amp; pos &lt; s1){</span><span class="token comment" spellcheck="true">//            if(a[pos] != b[i]){</span><span class="token comment" spellcheck="true">//                return a[pos] &lt; b[i];</span><span class="token comment" spellcheck="true">//            }</span><span class="token comment" spellcheck="true">//            i += 1;</span><span class="token comment" spellcheck="true">//            pos += 1;</span><span class="token comment" spellcheck="true">//        }</span><span class="token comment" spellcheck="true">//    } else{</span><span class="token comment" spellcheck="true">//        int i = 0;</span><span class="token comment" spellcheck="true">//        while (i&lt;s1 &amp;&amp; pos &lt; s2){</span><span class="token comment" spellcheck="true">//            if(a[i] != b[pos]){</span><span class="token comment" spellcheck="true">//                return a[i] &lt; b[pos];</span><span class="token comment" spellcheck="true">//            }</span><span class="token comment" spellcheck="true">//            i += 1;</span><span class="token comment" spellcheck="true">//            pos += 1;</span><span class="token comment" spellcheck="true">//        }</span><span class="token comment" spellcheck="true">//    }</span><span class="token comment" spellcheck="true">//    return a&lt;b;</span><span class="token comment" spellcheck="true">//}</span><span class="token keyword">bool</span> <span class="token function">cmp</span><span class="token punctuation">(</span>string <span class="token operator">&amp;</span>a<span class="token punctuation">,</span> string <span class="token operator">&amp;</span>b<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> a<span class="token operator">+</span>b<span class="token operator">&lt;</span>b<span class="token operator">+</span>a<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> N<span class="token punctuation">;</span>    cin <span class="token operator">>></span> N<span class="token punctuation">;</span>    vector<span class="token operator">&lt;</span>string<span class="token operator">></span> <span class="token function">a</span><span class="token punctuation">(</span>N<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> N<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>        cin <span class="token operator">>></span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">sort</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> a<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> cmp<span class="token punctuation">)</span><span class="token punctuation">;</span>    string ans<span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> N<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>        ans <span class="token operator">+</span><span class="token operator">=</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span>ans<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> ans<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">'0'</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        ans<span class="token punctuation">.</span><span class="token function">erase</span><span class="token punctuation">(</span>ans<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>ans<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        cout <span class="token operator">&lt;&lt;</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span><span class="token punctuation">{</span>        cout <span class="token operator">&lt;&lt;</span> ans<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;1038-Recover-the-Smallest-Number&quot;&gt;&lt;a href=&quot;#1038-Recover-the-Smallest-Number&quot; class=&quot;headerlink&quot; title=&quot;1038 Recover the Smallest Nu
      
    
    </summary>
    
    
      <category term="pat" scheme="http://blog.master-cai.xyz/categories/pat/"/>
    
    
      <category term="pat" scheme="http://blog.master-cai.xyz/tags/pat/"/>
    
      <category term="贪心" scheme="http://blog.master-cai.xyz/tags/%E8%B4%AA%E5%BF%83/"/>
    
  </entry>
  
  <entry>
    <title>1067 Sort with Swap(0,i)</title>
    <link href="http://blog.master-cai.xyz/posts/34414.html"/>
    <id>http://blog.master-cai.xyz/posts/34414.html</id>
    <published>2020-05-22T07:05:10.000Z</published>
    <updated>2020-05-22T23:56:58.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1067-Sort-with-Swap-0-i"><a href="#1067-Sort-with-Swap-0-i" class="headerlink" title="1067 Sort with Swap(0, i)"></a>1067 Sort with Swap(0, i)</h1><h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>Given any permutation of the numbers {0, 1, 2,…, <em>N</em>−1}, it is easy to sort them in increasing order. But what if <code>Swap(0, *)</code> is the ONLY operation that is allowed to use? For example, to sort {4, 0, 2, 1, 3} we may apply the swap operations in the following way:</p><pre><code>Swap(0, 1) =&gt; {4, 1, 2, 0, 3}Swap(0, 3) =&gt; {4, 1, 2, 3, 0}Swap(0, 4) =&gt; {0, 1, 2, 3, 4}</code></pre><p>Now you are asked to find the minimum number of swaps need to sort the given permutation of the first <em>N</em> nonnegative integers.</p><h3 id="Input-Specification"><a href="#Input-Specification" class="headerlink" title="Input Specification:"></a>Input Specification:</h3><p>Each input file contains one test case, which gives a positive <em>N</em> (≤105) followed by a permutation sequence of {0, 1, …, <em>N</em>−1}. All the numbers in a line are separated by a space.</p><h3 id="Output-Specification"><a href="#Output-Specification" class="headerlink" title="Output Specification:"></a>Output Specification:</h3><p>For each case, simply print in a line the minimum number of swaps need to sort the given permutation.</p><h3 id="Sample-Input"><a href="#Sample-Input" class="headerlink" title="Sample Input:"></a>Sample Input:</h3><pre class="line-numbers language-in"><code class="language-in">103 5 7 2 6 4 9 0 8 1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="Sample-Output"><a href="#Sample-Output" class="headerlink" title="Sample Output:"></a>Sample Output:</h3><pre class="line-numbers language-out"><code class="language-out">9<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><p>本题的主要思路就是贪心算法，即每次交换的时候，都尽可能的使一个元素正确的归位。最直接的想法就是，用一个数组记录原始数据，然后用一个hash map记录元素所在位置。每次都从0元素开始，当0元素不在正确的位置时，将其和0所在的位置应该放置的元素进行交换，这样就完成了一个元素的归位。当出现0元素已经归位但是整体序列还不是有序的情况时，我们选择序列中的一个还处于无序状态的元素，将其和0元素交换位置，然后再重复上述过程。最初的想法就是，没交换一次，就对整体的序列进行一次扫描判断是否全部有序，但是有两个样例无法通过。后来对这个判断是否有序的方法进行了改进，在最开始录入原始数据的时候，记录一下一共有多少个元素是无序的，然后循环的退出条件就变成了判断当前归位的元素数是否达到要求即可。这样优化了以后还是无法通过样例。。最后参考了一下题解，发现问题出在了寻找一个处于无序状态的元素这一步。题解给出的方法是再维护一个变量，记录当前未复位的位置最小的一个元素的位置。这样整体程序就显得比较复杂了。然后我又发现了一种更加巧妙的解法，整体思路是：使用a[t]=i记录t在i位置，依次遍历每个位置，如果当前位置不正确，则让0号来执行下列操作使其回到正确位置：如果0号现在不在有序位置（0位），那就让0号和此数字交换位置，直到0号回到有序位置。然后再次检查此位置是否是正确的，如果不是，就让0号和其交换位置，如果是，那就直接跳过。这里这一步就是此算法中最巧妙的一步，用这种方式完成了“维护一个未归位的元素的最小位置”这一操作。到达最后一个位置的时候，如果0号和最后一个数字都有序就正确，否则交换位置即可。</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;iostream></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> n<span class="token punctuation">,</span> t<span class="token punctuation">,</span> cnt <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> a<span class="token punctuation">[</span><span class="token number">10010</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    cin <span class="token operator">>></span> n<span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        cin <span class="token operator">>></span> t<span class="token punctuation">;</span>        a<span class="token punctuation">[</span>t<span class="token punctuation">]</span> <span class="token operator">=</span> i<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">!=</span> i<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">while</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token function">swap</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> a<span class="token punctuation">[</span>a<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                cnt <span class="token operator">+</span><span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>i <span class="token operator">!=</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 当0归位但是a[i]还无序时 交换</span>                <span class="token function">swap</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                cnt <span class="token operator">+</span><span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    cout <span class="token operator">&lt;&lt;</span> cnt<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;1067-Sort-with-Swap-0-i&quot;&gt;&lt;a href=&quot;#1067-Sort-with-Swap-0-i&quot; class=&quot;headerlink&quot; title=&quot;1067 Sort with Swap(0, i)&quot;&gt;&lt;/a&gt;1067 Sort with 
      
    
    </summary>
    
    
      <category term="pat" scheme="http://blog.master-cai.xyz/categories/pat/"/>
    
    
      <category term="pat" scheme="http://blog.master-cai.xyz/tags/pat/"/>
    
      <category term="贪心" scheme="http://blog.master-cai.xyz/tags/%E8%B4%AA%E5%BF%83/"/>
    
  </entry>
  
  <entry>
    <title>1012 The Best Rank</title>
    <link href="http://blog.master-cai.xyz/posts/18502.html"/>
    <id>http://blog.master-cai.xyz/posts/18502.html</id>
    <published>2020-05-20T02:43:48.000Z</published>
    <updated>2020-05-20T03:05:10.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1012-The-Best-Rank"><a href="#1012-The-Best-Rank" class="headerlink" title="1012 The Best Rank"></a>1012 The Best Rank</h1><h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>To evaluate the performance of our first year CS majored students, we consider their grades of three courses only: <code>C</code> - C Programming Language, <code>M</code> - Mathematics (Calculus or Linear Algrbra), and <code>E</code> - English. At the mean time, we encourage students by emphasizing on their best ranks – that is, among the four ranks with respect to the three courses and the average grade, we print the best rank for each student.</p><p>For example, The grades of <code>C</code>, <code>M</code>, <code>E</code> and <code>A</code> - Average of 4 students are given as the following:</p><pre><code>StudentID  C  M  E  A310101     98 85 88 90310102     70 95 88 84310103     82 87 94 88310104     91 91 91 91</code></pre><p>Then the best ranks for all the students are No.1 since the 1st one has done the best in C Programming Language, while the 2nd one in Mathematics, the 3rd one in English, and the last one in average.</p><h3 id="Input-Specification"><a href="#Input-Specification" class="headerlink" title="Input Specification:"></a>Input Specification:</h3><p>Each input file contains one test case. Each case starts with a line containing 2 numbers <em>N</em> and <em>M</em> (≤2000), which are the total number of students, and the number of students who would check their ranks, respectively. Then <em>N</em> lines follow, each contains a student ID which is a string of 6 digits, followed by the three integer grades (in the range of [0, 100]) of that student in the order of <code>C</code>, <code>M</code> and <code>E</code>. Then there are <em>M</em> lines, each containing a student ID.</p><h3 id="Output-Specification"><a href="#Output-Specification" class="headerlink" title="Output Specification:"></a>Output Specification:</h3><p>For each of the <em>M</em> students, print in one line the best rank for him/her, and the symbol of the corresponding rank, separated by a space.</p><p>The priorities of the ranking methods are ordered as <code>A</code> &gt; <code>C</code> &gt; <code>M</code> &gt; <code>E</code>. Hence if there are two or more ways for a student to obtain the same best rank, output the one with the highest priority.</p><p>If a student is not on the grading list, simply output <code>N/A</code>.</p><h3 id="Sample-Input"><a href="#Sample-Input" class="headerlink" title="Sample Input:"></a>Sample Input:</h3><pre class="line-numbers language-in"><code class="language-in">5 6310101 98 85 88310102 70 95 88310103 82 87 94310104 91 91 91310105 85 90 90310101310102310103310104310105999999<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="Sample-Output"><a href="#Sample-Output" class="headerlink" title="Sample Output:"></a>Sample Output:</h3><pre class="line-numbers language-out"><code class="language-out">1 C1 M1 E1 A3 AN/A<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><p>本题的基本思路其实不太难，就是对数据按照要求进行排序即可。但是细节部分问题比较多，不注意的话无法拿到所有分数。首先，对于A，题目中没有说明是否需要四舍五入，因此有一个很巧妙的处理方法，就是只存储总分不计算平均值（题目中只要求排名），这样得出的排名必然是对的。如果一定要计算平均分，可以使用库函数或者加0.5再直接取整。第二就是这个排名，如果有并列的情况，排名不能顺延而是直接按照人数排名，即：<code>1 1 3 4 5</code>。最后就是这个变量的存储问题，本题设计的变量较多，4个分数，4个排名，可以直接存储在数组中，如果单独明明代码重复太大（前两天我还说别人来着。。。）本题就是麻烦点，注意细节。（但我确实没调出来。。）</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;cstdio></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;algorithm></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">struct</span> node <span class="token punctuation">{</span>    <span class="token keyword">int</span> id<span class="token punctuation">,</span> best<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// best存储最优排名的下标</span>    <span class="token keyword">int</span> score<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">,</span> rank<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// A C M E</span><span class="token punctuation">}</span>stu<span class="token punctuation">[</span><span class="token number">2005</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> exist<span class="token punctuation">[</span><span class="token number">1000000</span><span class="token punctuation">]</span><span class="token punctuation">,</span> flag <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// exist 用来判断是否存在</span><span class="token keyword">bool</span> <span class="token function">cmp1</span><span class="token punctuation">(</span>node a<span class="token punctuation">,</span> node b<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">return</span> a<span class="token punctuation">.</span>score<span class="token punctuation">[</span>flag<span class="token punctuation">]</span> <span class="token operator">></span> b<span class="token punctuation">.</span>score<span class="token punctuation">[</span>flag<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> n<span class="token punctuation">,</span> m<span class="token punctuation">,</span> id<span class="token punctuation">;</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d %d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>n<span class="token punctuation">,</span> <span class="token operator">&amp;</span>m<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d %d %d %d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>stu<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>id<span class="token punctuation">,</span> <span class="token operator">&amp;</span>stu<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>score<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>stu<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>score<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>stu<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>score<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        stu<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>score<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span>stu<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>score<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> stu<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>score<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">+</span> stu<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>score<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">3.0</span> <span class="token operator">+</span> <span class="token number">0.5</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">for</span><span class="token punctuation">(</span>flag <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> flag <span class="token operator">&lt;=</span> <span class="token number">3</span><span class="token punctuation">;</span> flag<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// flag用来确定当前排序的是哪个分数</span>        <span class="token function">sort</span><span class="token punctuation">(</span>stu<span class="token punctuation">,</span> stu <span class="token operator">+</span> n<span class="token punctuation">,</span> cmp1<span class="token punctuation">)</span><span class="token punctuation">;</span>        stu<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>rank<span class="token punctuation">[</span>flag<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            stu<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>rank<span class="token punctuation">[</span>flag<span class="token punctuation">]</span> <span class="token operator">=</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>stu<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>score<span class="token punctuation">[</span>flag<span class="token punctuation">]</span> <span class="token operator">==</span> stu<span class="token punctuation">[</span>i<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>score<span class="token punctuation">[</span>flag<span class="token punctuation">]</span><span class="token punctuation">)</span>                stu<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>rank<span class="token punctuation">[</span>flag<span class="token punctuation">]</span> <span class="token operator">=</span> stu<span class="token punctuation">[</span>i<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>rank<span class="token punctuation">[</span>flag<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        exist<span class="token punctuation">[</span>stu<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>id<span class="token punctuation">]</span> <span class="token operator">=</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>        stu<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>best <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> minn <span class="token operator">=</span> stu<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>rank<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> <span class="token number">3</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">//这里是求排名的最小值</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>stu<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>rank<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">&lt;</span> minn<span class="token punctuation">)</span> <span class="token punctuation">{</span>                minn <span class="token operator">=</span> stu<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>rank<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>                stu<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>best <span class="token operator">=</span> j<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">char</span> c<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">'A'</span><span class="token punctuation">,</span> <span class="token string">'C'</span><span class="token punctuation">,</span> <span class="token string">'M'</span><span class="token punctuation">,</span> <span class="token string">'E'</span><span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> m<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> temp <span class="token operator">=</span> exist<span class="token punctuation">[</span>id<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>temp<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">int</span> best <span class="token operator">=</span> stu<span class="token punctuation">[</span>temp<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>best<span class="token punctuation">;</span>            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d %c\n"</span><span class="token punctuation">,</span> stu<span class="token punctuation">[</span>temp<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>rank<span class="token punctuation">[</span>best<span class="token punctuation">]</span><span class="token punctuation">,</span> c<span class="token punctuation">[</span>best<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"N/A\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;1012-The-Best-Rank&quot;&gt;&lt;a href=&quot;#1012-The-Best-Rank&quot; class=&quot;headerlink&quot; title=&quot;1012 The Best Rank&quot;&gt;&lt;/a&gt;1012 The Best Rank&lt;/h1&gt;&lt;h2 id=&quot;题
      
    
    </summary>
    
    
      <category term="pat" scheme="http://blog.master-cai.xyz/categories/pat/"/>
    
    
      <category term="pat" scheme="http://blog.master-cai.xyz/tags/pat/"/>
    
      <category term="sort" scheme="http://blog.master-cai.xyz/tags/sort/"/>
    
  </entry>
  
  <entry>
    <title>1046 Shortest Distance</title>
    <link href="http://blog.master-cai.xyz/posts/64131.html"/>
    <id>http://blog.master-cai.xyz/posts/64131.html</id>
    <published>2020-05-16T23:58:55.000Z</published>
    <updated>2020-05-17T00:17:00.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1046-Shortest-Distance"><a href="#1046-Shortest-Distance" class="headerlink" title="1046 Shortest Distance"></a><strong>1046</strong> <strong>Shortest Distance</strong></h1><h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>The task is really simple: given <em>N</em> exits on a highway which forms a simple cycle, you are supposed to tell the shortest distance between any pair of exits.</p><h3 id="Input-Specification"><a href="#Input-Specification" class="headerlink" title="Input Specification:"></a>Input Specification:</h3><p>Each input file contains one test case. For each case, the first line contains an integer <em>N</em> (in [3,105]), followed by <em>N</em> integer distances <em>D</em>1 <em>D</em>2 ⋯ <em>D**N</em>, where <em>D**i</em> is the distance between the <em>i</em>-th and the (<em>i</em>+1)-st exits, and <em>D**N</em> is between the <em>N</em>-th and the 1st exits. All the numbers in a line are separated by a space. The second line gives a positive integer <em>M</em> (≤104), with <em>M</em> lines follow, each contains a pair of exit numbers, provided that the exits are numbered from 1 to <em>N</em>. It is guaranteed that the total round trip distance is no more than 107.</p><h3 id="Output-Specification"><a href="#Output-Specification" class="headerlink" title="Output Specification:"></a>Output Specification:</h3><p>For each test case, print your results in <em>M</em> lines, each contains the shortest distance between the corresponding given pair of exits.</p><h3 id="Sample-Input"><a href="#Sample-Input" class="headerlink" title="Sample Input:"></a>Sample Input:</h3><pre class="line-numbers language-in"><code class="language-in">5 1 2 4 14 931 32 54 1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="Sample-Output"><a href="#Sample-Output" class="headerlink" title="Sample Output:"></a>Sample Output:</h3><pre class="line-numbers language-out"><code class="language-out">3107<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><p>题目本身没有什么难度，最暴力的做法就是对于每一个起点，同时从两个方向进行搜索，然后对结果进行比较。但是这样的话时间复杂度比较高，最后一个测试样例无法通过。题解中的方法比较巧妙，可以说是利用了动态规划的思想来解决的。将dis数组定义为从点1到点i的下一个节点的距离，这里定义为点i的下一个节点而不是到点i的距离，原因是如果那样表示的话，就无法表示从点N到点1了（中间没有点0），因此这样定义方便一些。另一种结局思路就是加上一个“点0“，点0到点1距离为0也可。如果要求点i到点j的距离，那么就是<code>dis[j-1]-dis[i-1]</code>。那么另一个方向的走法要怎么计算呢？因为题中给出的是一个环，即距离总长度是不变的，所以我们只需要用总长度减去这个距离，就是从另一个方向走需要的距离了（这两个点将圆分成了两半）。</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token comment" spellcheck="true">//</span><span class="token comment" spellcheck="true">// Created by masterCai on 2020/5/15.</span><span class="token comment" spellcheck="true">//</span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;vector></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> N<span class="token punctuation">;</span>    cin <span class="token operator">>></span> N<span class="token punctuation">;</span>    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">dis</span><span class="token punctuation">(</span>N<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> sum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> left<span class="token punctuation">,</span> right<span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> N<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> tmp<span class="token punctuation">;</span>        <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>tmp<span class="token punctuation">)</span><span class="token punctuation">;</span>        sum <span class="token operator">+</span><span class="token operator">=</span> tmp<span class="token punctuation">;</span>        dis<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> sum<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">int</span> M<span class="token punctuation">;</span>    cin <span class="token operator">>></span> M<span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> M<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d %d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>left<span class="token punctuation">,</span> <span class="token operator">&amp;</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>left <span class="token operator">></span> right<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token function">swap</span><span class="token punctuation">(</span>left<span class="token punctuation">,</span> right<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">int</span> tmp <span class="token operator">=</span> dis<span class="token punctuation">[</span>right<span class="token number">-1</span><span class="token punctuation">]</span> <span class="token operator">-</span> dis<span class="token punctuation">[</span>left<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span> <span class="token function">min</span><span class="token punctuation">(</span>tmp<span class="token punctuation">,</span> sum<span class="token operator">-</span>tmp<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;1046-Shortest-Distance&quot;&gt;&lt;a href=&quot;#1046-Shortest-Distance&quot; class=&quot;headerlink&quot; title=&quot;1046 Shortest Distance&quot;&gt;&lt;/a&gt;&lt;strong&gt;1046&lt;/strong
      
    
    </summary>
    
    
      <category term="pat" scheme="http://blog.master-cai.xyz/categories/pat/"/>
    
    
      <category term="pat" scheme="http://blog.master-cai.xyz/tags/pat/"/>
    
      <category term="算法" scheme="http://blog.master-cai.xyz/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>1143 Lowest Common Ancestor</title>
    <link href="http://blog.master-cai.xyz/posts/63296.html"/>
    <id>http://blog.master-cai.xyz/posts/63296.html</id>
    <published>2020-05-15T03:20:14.000Z</published>
    <updated>2020-05-17T00:17:00.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1143-Lowest-Common-Ancestor"><a href="#1143-Lowest-Common-Ancestor" class="headerlink" title="1143 Lowest Common Ancestor"></a><strong>1143</strong> <strong>Lowest Common Ancestor</strong></h1><h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><pre><code>The lowest common ancestor (LCA) of two nodes U and V in a tree is the deepest node that has both U and V as descendants.A binary search tree (BST) is recursively defined as a binary tree which has the following properties:The left subtree of a node contains only nodes with keys less than the node's key.The right subtree of a node contains only nodes with keys greater than or equal to the node's key.Both the left and right subtrees must also be binary search trees.Given any two nodes in a BST, you are supposed to find their LCA.Input Specification:Each input file contains one test case. For each case, the first line gives two positive integers: M (≤ 1,000), the number of pairs of nodes to be tested; and N (≤ 10,000), the number of keys in the BST, respectively. In the second line, N distinct integers are given as the preorder traversal sequence of the BST. Then M lines follow, each contains a pair of integer keys U and V. All the keys are in the range of int.Output Specification:For each given pair of U and V, print in a line LCA of U and V is A. if the LCA is found and A is the key. But if A is one of U and V, print X is an ancestor of Y. where X is A and Y is the other node. If U or V is not found in the BST, print in a line ERROR: U is not found. or ERROR: V is not found. or ERROR: U and V are not found..Sample Input:6 86 3 1 2 5 4 8 72 58 71 912 -30 899 99Sample Output:LCA of 2 and 5 is 3.8 is an ancestor of 7.ERROR: 9 is not found.ERROR: 12 and -3 are not found.ERROR: 0 is not found.ERROR: 99 and 99 are not found.</code></pre><h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><p>本题是将BST和LCA算法结合起来进行考察，看起来很复杂，实际上是降低了难度。最直接的想法就是先利用pre数组构建出一个BST，然后在用LCA算法搜索结果，但是题目限制了时间为200ms，这样的话部分样例无法通过。题解的思路就非常巧妙，直接对pre数组进行遍历，每次比较带查询数据x，y和当前元素的大小关系即可确定位置。原理是利用了BST的属性，大小关系即确定了元素之间的位置关系。大的元素一点在右，小的元素一定在左，因此只要满足对于一个元素a，<code>x&gt;=a&amp;&amp;y&lt;=a</code>或者<code>y&gt;=a&amp;&amp;x&lt;=a</code>即可说明x，y在a的两侧，即公共节点。其他边界条件再加以判断即可。另题解中有另外一个技巧：利用一个map来存储元素是否存在，提高了速度。</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token comment" spellcheck="true">//</span><span class="token comment" spellcheck="true">// Created by masterCai on 2020/5/14.</span><span class="token comment" spellcheck="true">//</span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;vector></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;unordered_map></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> M<span class="token punctuation">,</span> N<span class="token punctuation">;</span>    cin <span class="token operator">>></span> M <span class="token operator">>></span> N<span class="token punctuation">;</span>    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">pre</span><span class="token punctuation">(</span>N<span class="token punctuation">)</span><span class="token punctuation">;</span>    unordered_map<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">bool</span><span class="token operator">></span> m<span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> N<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>pre<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        m<span class="token punctuation">[</span>pre<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> M<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> x<span class="token punctuation">,</span> y<span class="token punctuation">;</span>        <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d %d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>x<span class="token punctuation">,</span> <span class="token operator">&amp;</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> a<span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> N<span class="token punctuation">;</span> <span class="token operator">++</span>j<span class="token punctuation">)</span> <span class="token punctuation">{</span>            a <span class="token operator">=</span> pre<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span>a<span class="token operator">>=</span>x <span class="token operator">&amp;&amp;</span> a <span class="token operator">&lt;=</span> y<span class="token punctuation">)</span><span class="token operator">||</span><span class="token punctuation">(</span>a<span class="token operator">>=</span>y <span class="token operator">&amp;&amp;</span> a<span class="token operator">&lt;=</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>m<span class="token punctuation">[</span>x<span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>m<span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"ERROR: %d and %d are not found.\n"</span><span class="token punctuation">,</span> x<span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>m<span class="token punctuation">[</span>x<span class="token punctuation">]</span> <span class="token operator">||</span> <span class="token operator">!</span>m<span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"ERROR: %d is not found.\n"</span><span class="token punctuation">,</span> <span class="token operator">!</span>m<span class="token punctuation">[</span>x<span class="token punctuation">]</span> <span class="token operator">?</span> x <span class="token operator">:</span> y<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>a<span class="token operator">==</span>x <span class="token operator">||</span> a<span class="token operator">==</span> y<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d is an ancestor of %d.\n"</span><span class="token punctuation">,</span> a<span class="token punctuation">,</span> a <span class="token operator">==</span> x <span class="token operator">?</span> y <span class="token operator">:</span> x<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span><span class="token punctuation">{</span>            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"LCA of %d and %d is %d.\n"</span><span class="token punctuation">,</span> x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> a<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;1143-Lowest-Common-Ancestor&quot;&gt;&lt;a href=&quot;#1143-Lowest-Common-Ancestor&quot; class=&quot;headerlink&quot; title=&quot;1143 Lowest Common Ancestor&quot;&gt;&lt;/a&gt;&lt;stro
      
    
    </summary>
    
    
      <category term="pat" scheme="http://blog.master-cai.xyz/categories/pat/"/>
    
    
      <category term="pat" scheme="http://blog.master-cai.xyz/tags/pat/"/>
    
      <category term="二叉搜索树" scheme="http://blog.master-cai.xyz/tags/%E4%BA%8C%E5%8F%89%E6%90%9C%E7%B4%A2%E6%A0%91/"/>
    
      <category term="LCA" scheme="http://blog.master-cai.xyz/tags/LCA/"/>
    
  </entry>
  
  <entry>
    <title>1141 PAT Ranking of Institutions</title>
    <link href="http://blog.master-cai.xyz/posts/52699.html"/>
    <id>http://blog.master-cai.xyz/posts/52699.html</id>
    <published>2020-05-13T23:54:05.000Z</published>
    <updated>2020-05-17T00:17:00.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1141-PAT-Ranking-of-Institutions"><a href="#1141-PAT-Ranking-of-Institutions" class="headerlink" title="1141 PAT Ranking of Institutions"></a><strong>1141</strong> <strong>PAT Ranking of Institutions</strong></h1><h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><pre><code>After each PAT, the PAT Center will announce the ranking of institutions based on their students' performances. Now you are asked to generate the ranklist.Input Specification:Each input file contains one test case. For each case, the first line gives a positive integer N (≤10^ID Score School where ID is a string of 6 characters with the first one representing the test level: B stands for the basic level, A the advanced level and T the top level; Score is an integer in [0, 100]; and School is the institution code which is a string of no more than 6 English letters (case insensitive). Note: it is guaranteed that ID is unique for each testee.Output Specification:For each case, first print in a line the total number of institutions. Then output the ranklist of institutions in nondecreasing order of their ranks in the following format:Rank School TWS Nswhere Rank is the rank (start from 1) of the institution; School is the institution code (all in lower case); ; TWS is the total weighted score which is defined to be the integer part of ScoreB/1.5 + ScoreA + ScoreT*1.5, where ScoreX is the total score of the testees belong to this institution on level X; and Ns is the total number of testees who belong to this institution.The institutions are ranked according to their TWS. If there is a tie, the institutions are supposed to have the same rank, and they shall be printed in ascending order of Ns. If there is still a tie, they shall be printed in alphabetical order of their codes.Sample Input:10A57908 85 AuB57908 54 LanXA37487 60 auT28374 67 CMUT32486 24 hypuA66734 92 cmuB76378 71 AUA47780 45 lanxA72809 100 pkuA03274 45 hypuSample Output:51 cmu 192 21 au 192 33 pku 100 14 hypu 81 24 lanx 81 2</code></pre><h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><p>本题其实没有什么难度，只是在做的时候，将问题想复杂了，导致卡壳。还是有两个点需要注意一下：</p><ol><li>scanf不能对string类型进行赋值，如果一点需要，需要先分配string空间（s.resize(100))</li><li>对于问题中的多个统计要求，其实大可不必集成在一个数据结构中，因为这是算法题而不是工程，不需要考虑其他方面，做出答案即可，可以用空间换时间即可。</li><li>cctype 这个头文件很好用 直接转换大小写</li><li>本题中要求只保留整数部分，但是需要全部累计后再截取，而不是每个结果都截取一次</li><li>c++中map的遍历，类型是pair</li></ol><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><pre class="line-numbers language-c++"><code class="language-c++">//// Created by masterCai on 2020/5/13.//#include <iostream>#include <vector>#include <algorithm>#include <cctype>#include <unordered_map>using namespace std;struct ins{    string school;    int TWS, Ns;};bool cmp(ins a, ins b){    if(a.TWS != b.TWS){        return a.TWS > b.TWS;    } else if(a.Ns != b.Ns){        return a.Ns < b.Ns;    } else{        return a.school < b.school;    }}int main(){    int n;    cin >> n;    unordered_map<string, int> cnt; //school-> Ns    unordered_map<string, double> sum; // school-> TWS    for (int i = 0; i < n; ++i) {        ins* in = new ins();        string ID;        double score;        string school;//        scanf("%s %lf %s", &ID, &score, &school);        cin >> ID >> score >> school;        for (int j = 0; j < school.length(); ++j) {            school[j] = tolower(school[j]);        }        switch (ID[0]) {            case 'B': score = score/1.5;                break;            case 'T': score = score*1.5;                break;        }        sum[school] += score;        cnt[school] += 1;    }    vector<ins> ans;    for(auto it = cnt.begin(); it != cnt.end(); it++){        ans.push_back(ins{it->first, (int)sum[it->first], cnt[it->first]});    }    sort(ans.begin(), ans.end(), cmp);    int rank = 0, pres=-1;    printf("%d\n", (int)ans.size());    for (int i = 0; i < ans.size(); ++i) {        if(pres != ans[i].TWS){ //判断排名是否一致            rank = i+1;        }        pres = ans[i].TWS;        printf("%d ", rank);        cout << ans[i].school;        printf(" %d %d\n", ans[i].TWS, ans[i].Ns);    }    return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;1141-PAT-Ranking-of-Institutions&quot;&gt;&lt;a href=&quot;#1141-PAT-Ranking-of-Institutions&quot; class=&quot;headerlink&quot; title=&quot;1141 PAT Ranking of Institut
      
    
    </summary>
    
    
      <category term="pat" scheme="http://blog.master-cai.xyz/categories/pat/"/>
    
    
      <category term="pat" scheme="http://blog.master-cai.xyz/tags/pat/"/>
    
  </entry>
  
</feed>
